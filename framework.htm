<!DOCTYPE html>
<!-- saved from url=(0047)http://students.susanbuck.net/framework#Updates -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Framework</title>

		
		
	<!-- JS -->
	<script type="text/javascript" src="./framework_files/jquery.min.js"></script>
	<link rel="stylesheet" href="http://code.jquery.com/ui/1.9.0/themes/base/jquery-ui.css">
	<script src="./framework_files/jquery-ui.js"></script>
	
	<!-- JS -->
	<script type="text/javascript" src="./framework_files/common.js"></script>

	<!-- CSS -->		
	<link rel="stylesheet" href="./framework_files/freshlaundry.css" type="text/css">
	<link rel="stylesheet" href="./framework_files/freshlaundry-jquery-ui.css" type="text/css">
	<link rel="stylesheet" href="./framework_files/students_susanbuck_net.css" type="text/css">
			
	<!-- Controller Specific JS/CSS -->
	<link rel="stylesheet" type="text/css" href="./framework_files/docs.css"><link rel="stylesheet" type="text/css" href="./framework_files/print_docs.css" media="print"><script type="text/javascript" src="./framework_files/docs.js"></script><script type="text/javascript" src="./framework_files/codemirror.js"></script><link rel="stylesheet" type="text/css" href="./framework_files/codemirror.css"><script type="text/javascript" src="./framework_files/javascript.js"></script><script type="text/javascript" src="./framework_files/htmlmixed.js"></script><script type="text/javascript" src="./framework_files/css.js"></script><script type="text/javascript" src="./framework_files/xml.js"></script><script type="text/javascript" src="./framework_files/php.js"></script><script type="text/javascript" src="./framework_files/clike.js"></script>	
<style id="wrc-middle-css" type="text/css">.wrc_whole_window{	display: none;	position: fixed; 	z-index: 2147483647;	background-color: rgba(40, 40, 40, 0.9);	word-spacing: normal;	margin: 0px;	padding: 0px;	border: 0px;	left: 0px;	top: 0px;	width: 100%;	height: 100%;	line-height: normal;	letter-spacing: normal;}.wrc_middle_main {	font-family: Segoe UI, Arial Unicode MS, Arial, Sans-Serif;	font-size: 14px;	width: 600px;	height: auto;	margin: 0px auto;	margin-top: 15%;    background: url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/background-body.jpg) repeat-x left top;	background-color: rgb(39, 53, 62);}.wrc_middle_logo {    background: url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/logo.jpg) no-repeat left bottom;    width: 140px;    height: 42px;    color: orange;    display: table-cell;    text-align: right;    vertical-align: middle;}.wrc_icon_warning {	margin: 20px 10px 20px 15px;	float: left;	background-color: transparent;}.wrc_middle_title {    color: #b6bec7;	height: auto;    margin: 0px auto;	font-size: 2.2em;	white-space: nowrap;	text-align: center;}.wrc_middle_hline {    height: 2px;	width: 100%;    display: block;}.wrc_middle_description {	text-align: center;	margin: 15px;	font-size: 1.4em;	padding: 20px;	height: auto;	color: white;	min-height: 3.5em;}.wrc_middle_actions_main_div {	margin-bottom: 15px;	text-align: center;}.wrc_middle_actions_blue_button {	-moz-appearance: none;	border-radius: 7px;	-moz-border-radius: 7px/7px;	border-radius: 7px/7px;	background-color: rgb(0, 173, 223) !important;	display: inline-block;	width: auto;	cursor: Pointer;	border: 2px solid #00dddd;}.wrc_middle_actions_blue_button:hover {	background-color: rgb(0, 159, 212) !important;}.wrc_middle_actions_blue_button:active {	background-color: rgb(0, 146, 200) !important;	border: 2px solid #00aaaa;}.wrc_middle_actions_blue_button div {	display: inline-block;	width: auto;	cursor: Pointer;	margin: 3px 10px 3px 10px;	color: white;	font-size: 1.2em;	font-weight: bold;}.wrc_middle_action_low {	font-size: 0.9em;	white-space: nowrap;	cursor: Pointer;	color: grey !important;	margin: 10px 10px 0px 10px;	text-decoration: none;}.wrc_middle_action_low:hover {	color: #aa4400 !important;}.wrc_middle_actions_rest_div {	padding-top: 5px;	white-space: nowrap;	text-align: center;}.wrc_middle_action {	white-space: nowrap;	cursor: Pointer;	color: red !important;	font-size: 1.2em;	margin: 10px 10px 0px 10px;	text-decoration: none;}.wrc_middle_action:hover {	color: #aa4400 !important;}</style><script id="wrc-script-middle_window" type="text/javascript" language="JavaScript">var g_inputsCnt = 0;var g_InputThis = new Array(null, null, null, null);var g_alerted = false;/* we test the input if it includes 4 digits   (input is a part of 4 inputs for filling the credit-card number)*/function is4DigitsCardNumber(val){	var regExp = new RegExp('[0-9]{4}');	return (val.length == 4 && val.search(regExp) == 0);}/* testing the whole credit-card number 19 digits devided by three '-' symbols or   exactly 16 digits without any dividers*/function isCreditCardNumber(val){	if(val.length == 19)	{		var regExp = new RegExp('[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}');		return (val.search(regExp) == 0);	}	else if(val.length == 16)	{		var regExp = new RegExp('[0-9]{4}[0-9]{4}[0-9]{4}[0-9]{4}');		return (val.search(regExp) == 0);	}	return false;}function CheckInputOnCreditNumber(self){	if(g_alerted)		return false;	var value = self.value;	if(self.type == 'text')	{		if(is4DigitsCardNumber(value))		{			var cont = true;			for(i = 0; i < g_inputsCnt; i++)				if(g_InputThis[i] == self)					cont = false;			if(cont && g_inputsCnt < 4)			{				g_InputThis[g_inputsCnt] = self;				g_inputsCnt++;			}		}		g_alerted = (g_inputsCnt == 4);		if(g_alerted)			g_inputsCnt = 0;		else			g_alerted = isCreditCardNumber(value);	}	return g_alerted;}function CheckInputOnPassword(self){	if(g_alerted)		return false;	var value = self.value;	if(self.type == 'password')	{		g_alerted = (value.length > 0);	}	return g_alerted;}function onInputBlur(self, bRatingOk, bFishingSite){	var bCreditNumber = CheckInputOnCreditNumber(self);	var bPassword = CheckInputOnPassword(self);	if((!bRatingOk || bFishingSite == 1) && (bCreditNumber || bPassword) )	{		var warnDiv = document.getElementById("wrcinputdiv");		if(warnDiv)		{			/* show the warning div in the middle of the screen */			warnDiv.style.left = "0px";			warnDiv.style.top = "0px";			warnDiv.style.width = "100%";			warnDiv.style.height = "100%";			document.getElementById("wrc_warn_fs").style.display = 'none';			document.getElementById("wrc_warn_cn").style.display = 'none';			if(bFishingSite)				document.getElementById("wrc_warn_fs").style.display = 'block';			else				document.getElementById("wrc_warn_cn").style.display = 'block';			warnDiv.style.display = 'block';		}	}}</script></head>

<body>	

			<a id="menu" href="http://students.susanbuck.net/">home</a>
	
	<div id="layout-content">
		<div id="toc">
	<span id="toc-toggle">-</span>
	Framework last updated:<br>
	<span style="background-color:yellow">Thursday 10/23</span>
	<br> Have you <a href="./framework_files/framework.htm">updated?</a><br><br>
	
	<strong><a href="https://github.com/susanBuck/framework/zipball/master">Download framework.zip</a></strong><br><br>
	
	<strong><a href="https://docs.google.com/document/pub?id=1MAZyCqJbIqhHsX_UI13fXT2hUBinr993OQutLo4U3jA" target="_blank">Common Problems / Solutions</a></strong>
	
	<br><br>
	<strong>Installation / Configuration</strong>
	<div>
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Introduction">Introduction</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#What is a framework exactly?">What is a framework exactly?</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Our process and goals">Our process and goals</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Troubleshooting">Troubleshooting</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Lets get started: Download">Lets get started: Download</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Install on your local server">Install on your local server</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Applications">Applications</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Accessing from your local server">Accessing from your local server</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Configuring environment.php">Configuring environment.php</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Tell Git to ignore environment.php">Tell Git to ignore environment.php</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Deploy to the live server">Deploy to the live server</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#environment.php for the live server">environment.php for the live server</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Live domain">Live domain</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Checkpoint">Checkpoint</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="./framework_files/framework.htm">Updates</a><br>
		
						</div>
			<br><strong>Basic Usage</strong>
			<div>
				
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Object Oriented Programming">Object Oriented Programming</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Routing / Controllers / Methods">Routing / Controllers / Methods</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Special Routing">Special Routing</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Views">Views</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Including JS/CSS in views">Including JS/CSS in views</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Libraries">Libraries</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Static vs. Instantiated Classes">Static vs. Instantiated Classes</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Creating your own libraries">Creating your own libraries</a><br>
		
					
					</div>
			<br><strong>Building an App: Part 1</strong>
			<div>
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#End goal: a simple micro-blog">End goal: a simple micro-blog</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Creating the local database">Creating the local database</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Connecting to the local database">Connecting to the local database</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Tables">Tables</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Building the Sign up form">Building the Sign up form</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Processing the Sign up">Processing the Sign up</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#SQL">SQL</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#SQL Injection Attacks">SQL Injection Attacks</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Encrypting password & login token">Encrypting password &amp; login token</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Adding data to $_POST">Adding data to $_POST</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Logging in">Logging in</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Authenticating">Authenticating</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Logging out">Logging out</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Creating the database">Creating the database</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Connecting to the live database">Connecting to the live database</a><br>
		
					
			
		
					</div>
			<br><strong>Building an App: Part 2</strong>
			<div>
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Database relationships">Database relationships</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#One to Many: Users to Posts">One to Many: Users to Posts</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Seeding data">Seeding data</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Many to Many: Users to Users">Many to Many: Users to Users</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Post stream">Post stream</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Gathering all the pieces">Gathering all the pieces</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Error checking / reporting">Error checking / reporting</a><br>
		
					
			
		
			
		
					</div>
			<br><strong>More functionality</strong>
			<div>
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Debugging">Debugging</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Logging">Logging</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Email: Configuration">Email: Configuration</a><br>
		
					
			
		
			
		
				
		&nbsp;&nbsp;<a href="http://students.susanbuck.net/framework#Email: Usage">Email: Usage</a><br>
		
		</div>
	<br><br><br>
</div>

<div class="wrapper">
	<span id="title">Framework</span><br>
<span id="subtitle">A simple, pedagogically geared PHP framework.</span>
<br><br>





<div class="page" style="margin-top:10px">
<h2><a name="Introduction"></a>Introduction</h2>
There are two approaches to developing with PHP. 
<br><br>
Often, beginners will start off with what we'll call the <em>pick-up</em> approach, analogous to a pick-up game of football (or whatever your sport of choice may be). There's not much organization or structure, but you've got the rough idea of an offense, defense, passing, receiving, etc. It isn't pretty, but it's a game nonetheless. 
<br><br>
As your skills improve though, you find yourself wanting more structure. You think that if you just had a little more strategy and organization, you'd be much better at the game. You think about plays, efficiency, teamwork, etc. You seek order, a system by which you can operate so you're consistent, make fewer mistakes and get better and faster at the game.
<br><br>
This is where the framework approach comes in. It turns your pick-up approach into a more organized and polished sport.
</div>







<div class="page">
<h2><a name="What is a framework exactly?"></a>What is a framework exactly?</h2>
Simply put, a framework is a collection of files you download that contain pre-existing code you'll build your application around. These files contain all the pieces you need to quickly develop applications. Your job will be to download the framework, set it up on your servers (local and live) and then start programming your application.
<br><br>
There are many popular PHP frameworks being used today:
<ul>
<li><a href="http://cakephp.org/">CakePHP</a>
</li><li><a href="http://codeigniter.com/">CodeIgnitor</a>
</li><li><a href="http://kohanaframework.org/">Kohana</a>
</li><li><a href="http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks#PHP_2">Comprehensive list...</a>
</li></ul>

This particular framework borrows from some of the core functionality used in Kohana, but has been pared down and simplified for the purpose of instruction. The idea is for us to get an understanding of frameworks in general, not necessarily to create a course on any one particular brand. I.e., this is not a CakePHP course, or a CodeIgniter course, etc.
<br><br>
You will find that after you go through the steps of using this framework, you will be well prepared for making the leap to another framework should you decide to do so. Also, because you'll understand more about frameworks, you'll be able to make a more informed decision about which framework is the best for your application needs.
</div>



<div class="page">
<h2><a name="Our process and goals"></a>Our process and goals</h2>
Because this framework is being used with teaching in mind, here's how the rest of the doc is going to work: First we're going to walk you through installation and configuration - and then we'll walk you through the steps you need to start using the framework. As we go through we'll explain the concepts and paradigms the framework is using. You can think of it as <strong>theory breakdown and practical how-to guide mixed together</strong>.
</div>



<div class="page">
<h2><a name="Troubleshooting"></a>Troubleshooting</h2>
Before we dig in, let's outline our basic steps and techniques for moving past issues as we come across them.
<br><br>

<strong>Check your error logs</strong><br>
On your local servers you'll find logs in the following locations:
<br><br>
MAMP users:
<textarea class="code" id="code-0" style="display: none; ">/Applications/MAMP/logs/</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>/Applications/MAMP/logs/</pre></div></div></div></div></div></div></div>

WAMP users:
<textarea class="code" id="code-1" style="display: none; ">c:\wamp\logs\</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>c:\wamp\logs\</pre></div></div></div></div></div></div></div>
<br>
There are two logs we're interested in at this point:<br><br>
<ul>
<li>The php error_log which captures errors relevant to, you guessed it, PHP.
</li><li>The Apache error log which captures errors relevant to your server.
</li></ul>

As for your live server, where you'll find your logs will depend on your server configuration. Dig around your directories for your php error_log. Unfortunately, if you're on a shared server you probably won't have access to your Apache error log.
<br><br>
<strong>Search!</strong><br>
We can almost guarantee that whatever problem you're facing - its not unique. Chances are someone else has already experienced it and there's an equally likely chance that someone has found and posted a solution somewhere online. Google and sites like stackoverflow.com are your friend.
<br><br>
<strong>Take it to the forum</strong><br>
Post specific details about the issue you're facing to the class forum. The more details you can give the better. Screenshots, specific error messages, platform information, etc. Try to break your problem down as much as possible so it's clearer and easier to answer.
<br><br>
<strong>Ask your hosting company</strong><br>
Sometimes, you may need to reach out to your hosting tech support for problems. Make sure you exhaust all of the above resources before you do this, and that you feel confident it's something on their end, not something on your end.
</div>








<div class="page">
<h2><a name="Lets get started: Download"></a>Lets get started: Download</h2>

With all that out of the way, let's start digging in...
<br><br>

First thing's first, download: <strong><a href="https://github.com/susanBuck/framework/zipball/master">framework.zip</a></strong>
<br><br>
After you download and unzip the folder, take a look at the contents so we can familiarize ourselves with what the framework contains:
<ul>
	<li><span class="variable">core</span> is where guts of the framework live. You should not edit anything in this directory, because when you'll need to update the framework, any changes you would have made will be overwritten. You always want to figure out how to make your changes happen on an application level, rather than at the core level.
	</li><li><span class="variable">environment.php</span> is a sample environment file - we'll touch more on that later.
	</li><li><span class="variable">myapp.com</span> is a sample application that we throw in which gives you a starting point for when you make your first app.
</li></ul>
</div>







<div class="page">
<h2><a name="Install on your local server"></a>Install on your local server</h2>

We're assuming you're working with a version control workflow, so you want to start by installing the framework on your local server. Later, using Git, we'll push your work to the live server.
<br><br>

Move the three files / directories (core, myapp.com, environment.php) into your local server root, within your <span class="variable">dwa</span> folder that should already exist.
<br><br>

MAMP users:
<textarea class="code" id="code-2" style="display: none; ">/Users/YourName/Sites/dwa/endcode</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>/Users/YourName/Sites/dwa/endcode</pre></div></div></div></div></div></div></div>

WAMP users:
<textarea class="code" id="code-3" style="display: none; ">c:/wamp/www/dwa/endcode</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>c:/wamp/www/dwa/endcode</pre></div></div></div></div></div></div></div>
<br>
The end result should look like this (where root is one of the WAMP/MAMP paths above):
<textarea class="code" id="code-4" style="display: none; ">/root/
----/dwa/
--------/core/
--------/environment.php
--------/myapp.com/</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 76px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 76px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>/root/</pre><pre>----/dwa/</pre><pre>--------/core/</pre><pre>--------/environment.php</pre><pre>--------/myapp.com/</pre></div></div></div></div></div></div></div>
</div>







<div class="page">
<h2><a name="Applications"></a>Applications</h2>

Let's start talking in terms of applications: each unique project you build should be considered its own application. 
<br><br>
We're going to start off in our examples building one single application, but we want to build assuming that down the road we'll be constructing multiple applications, all of which can operate out of the same framework (no sense having multiple copies).
<br><br>
So imagine you're an entrepreneur who is starting an online store selling vitamins, but you also have a local coffee shop and a side hobby of organizing your family tree. 
<br><br>
You have one host from which you want to host these three separate projects.
<br><br>
Each project has its own domain (myvitamins.com, javabeans.com and theobrienfamilytree.com)
<br><br>
To set this up, you would want each project to have its own directory, parallel to your core framework files. For convention's sake, we'll use the domain name for each app as the directory name.

Example (where root is your local server path):
<textarea class="code" id="code-5" style="display: none; ">/root/
----/dwa/
--------/core/
--------/environment.php
--------/myvitamins.com/
--------/javabeans.com/
--------/theobrienfamilytree.com/</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 101.60000000000001px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 102px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>/root/</pre><pre>----/dwa/</pre><pre>--------/core/</pre><pre>--------/environment.php</pre><pre>--------/myvitamins.com/</pre><pre>--------/javabeans.com/</pre><pre>--------/theobrienfamilytree.com/</pre></div></div></div></div></div></div></div>
<br>
Keep that in mind. For course work, however, let's start with our first application - <span class="variable">p2.yourdomain.com</span> (It won't have its own domain, but a subdomain instead).
<br><br>
To start this application, duplicate the <span class="variable">myapp.com</span> directory that came with the framework, and rename it to <span class="variable">p2.yourdomain.com</span>
<br><br>
When you're done, your directory structure should look like this (where root is your local server path):
<textarea class="code" id="code-6" style="display: none; ">/root/
----/dwa/
--------/core/
--------/environment.php
--------/myapp.com
--------/p2.yourdomain.com/
---------------------/config/
---------------------/controllers/
---------------------/index.php
---------------------/views/</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 140px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 140px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>/root/</pre><pre>----/dwa/</pre><pre>--------/core/</pre><pre>--------/environment.php</pre><pre>--------/myapp.com</pre><pre>--------/p2.yourdomain.com/</pre><pre>---------------------/config/</pre><pre>---------------------/controllers/</pre><pre>---------------------/index.php</pre><pre>---------------------/views/</pre></div></div></div></div></div></div></div>
</div>







<div class="page">
<h2><a name="Accessing from your local server"></a>Accessing from your local server</h2>

Now that we've started building our local root around applications, we need to point our local server to the specific application we're working on so we can access it.
<br><br>
In other words, if I wanted to do some work on my p2.yourdomain.com application, I'd want to be able to run that app by hitting http://localhost.

<br><br>

<strong>Mac / MAMP</strong><br>
<img style="width:300px" src="./framework_files/00002878.png"><br>

Set your Apache Document Root to:
<textarea class="code" id="code-7" style="display: none; ">/Users/YourUsername/Sites/dwa/p2.yourdomain.com</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>/Users/YourUsername/Sites/dwa/p2.yourdomain.com</pre></div></div></div></div></div></div></div>
MAMP will prompt you to restart your server.


<br><br>
<strong>PC / WAMP</strong><br>
<img style="width:300px" src="./framework_files/00002879.png"><br>
From the WAMP icon in your doc, go to Apache: httpd.conf
<br><br>
In httpd.conf look for this line: 
<textarea class="code" id="code-8" style="display: none; ">DocumentRoot "c:\wamp\www\"</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>DocumentRoot "c:\wamp\www\"</pre></div></div></div></div></div></div></div>
And change it to this:
<textarea class="code" id="code-9" style="display: none; ">DocumentRoot "c:\wamp\www\dwa\p2.yourdomain.com"</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>DocumentRoot "c:\wamp\www\dwa\p2.yourdomain.com"</pre></div></div></div></div></div></div></div>

Next, go to WAMP Icon: Apache: Apache Modules and make sure rewrite_module is checked.
<br><br>			
Once you've done the above, stop and restart your local server, then point your browser to http://localhost. 
<br><br>
You should see something like this:

<img class="responsive" src="./framework_files/00002908.png">
<br>
If you do, congratulations! You've successfully installed the framework and created a working application.
<br><br>
If you don't, you can check the list of <a href="https://docs.google.com/a/susanbuck.net/document/pub?id=1MAZyCqJbIqhHsX_UI13fXT2hUBinr993OQutLo4U3jA">common problems and solutions.</a>
<br><br>
<em>Do not proceed until you've got this working.</em>
</div>








<div class="page">
<h2><a name="Configuring environment.php"></a>Configuring environment.php</h2>

With your framework installed and your first application begun, it's time to dig into configuration. The first thing we need to configure is environment.php which contains settings relevant to which environment you're working on. Because it's environment specific, the settings you have for your local server may differ from the settings you'll have for your live server (we'll get to that later).
<br><br>
Here are some examples of settings that environment.php handles:
<ul>
<li>Your local environment file may enable the display of PHP errors (always good for debugging), but you live environment file may hide such errors (don't want users to see errors!).
</li><li>Your local environment will be configured to display the raw errors of any MySQL issues, whereas your live environment will suppress such details and instead email the app admin while showing a graceful error to the user.
</li><li>Your local environment may prevent outgoing emails (to avoid accidentally spamming all your users when working!), whereas your live environment file would allow outgoing emails.

</li><li>Your local environment can determine whether your application should connect to a local copy of your database, or your live database that your users are accessing.
</li><li>Your local environment will display the yellow system bar (shown above), whereas your live server would not.
</li></ul>
Enough talk, let's look at the code. Open environment.php in your code editor.

You will see a series of lines that look like this:
<textarea class="code" id="code-10" style="display: none; ">define('IN_PRODUCTION', FALSE);</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>define('IN_PRODUCTION', FALSE);</pre></div></div></div></div></div></div></div>

Here we're using the PHP function define to set constants. Constants are similar to variables in that they store information, but as the name implies those values don't ever change - they're constant throughout your app. 
<br><br>
environment.php is well commented to help you understand what is going on, so give it a thorough read through. 
<br><br>
Right now you don't need to change any settings, but you will when we get to databases.
</div>







<div class="page">
<h2><a name="Tell Git to ignore environment.php"></a>Tell Git to ignore environment.php</h2>

After all these changes and new files, you should see a lot of changes in your local Git repository. Before we get to committing that new data, we first need to tell Git what we don't want tracked.
<br><br>
environment.php is one of the few files you do not want tracked in your version control repository - this is because what you have in your local environment.php file will differ from what is needed in your live environment.php file. Given this, we don't want to keep them in sync!
<br><br>
To tell git to ignore this file you want to add it the .gitignore file in your working directory. You can either open this file and edit it via Command Line or a code editor, or you can do it from the Github App.
<br><br>
After you make this change, you should notice that environment.php is no longer in your list of changed files and .gitignore has been added (it's ok to add .gitignore to your repo).

<img class="responsive" src="./framework_files/00002883.png">
</div>








<div class="page">
<h2><a name="Deploy to the live server"></a>Deploy to the live server</h2>

We've made a lot of progress on our local server, but before we move further, let's do our set up for the live server. 
Go ahead and commit / push all the changes you've made so far to your repo, then pull them to your live server. 

When you're done, your live server should look something like this:
<textarea class="code" id="code-11" style="display: none; ">/public_html/
------------/dwa/
----------------/core/
----------------/p2.yourdomain.com/</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 63.2px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 64px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>/public_html/</pre><pre>------------/dwa/</pre><pre>----------------/core/</pre><pre>----------------/p2.yourdomain.com/</pre></div></div></div></div></div></div></div>
</div>









<div class="page">
<h2><a name="environment.php for the live server"></a>environment.php for the live server</h2>
Note there's no environment.php file on the live server - that's because we had it removed / ignored from the repo. 

Given that, let's manually add one. Create a new file called environment.php in the dwa/ directory and add this code:
<textarea class="code" id="code-12" style="display: none; ">&lt;?php
# LIVE

define('IN_PRODUCTION', TRUE);
define('DISPLAY_ERRORS', FALSE);
define('ENABLE_OUTGOING_EMAIL', TRUE);

# We're on the live server, so always connect to live database
define('DB_HOST', '');
define('DB_USER', '');
define('DB_PASS', '');</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 152.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 153px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-comment"># LIVE</span></pre><pre> </pre><pre><span class="cm-word">define</span>(<span class="cm-string">'IN_PRODUCTION'</span>, <span class="cm-atom">TRUE</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'DISPLAY_ERRORS'</span>, <span class="cm-atom">FALSE</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'ENABLE_OUTGOING_EMAIL'</span>, <span class="cm-atom">TRUE</span>);</pre><pre> </pre><pre><span class="cm-comment"># We're on the live server, so always connect to live database</span></pre><pre><span class="cm-word">define</span>(<span class="cm-string">'DB_HOST'</span>, <span class="cm-string">''</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'DB_USER'</span>, <span class="cm-string">''</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'DB_PASS'</span>, <span class="cm-string">''</span>);</pre></div></div></div></div></div></div></div>
<br>
Now your directory structure should look like this:
<textarea class="code" id="code-13" style="display: none; ">/public_html/
------------/dwa/
----------------/core/
----------------/p2.yourdomain.com/
----------------/environment.php</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 76px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 76px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>/public_html/</pre><pre>------------/dwa/</pre><pre>----------------/core/</pre><pre>----------------/p2.yourdomain.com/</pre><pre>----------------/environment.php</pre></div></div></div></div></div></div></div>
</div>









<div class="page">
<h2><a name="Live domain"></a>Live domain</h2>

Remember when we had to set it up so http://localhost pointed to our application? Now we need to do the same thing on our live server, but instead of http://localhost, we want to use the actual domain - in this case http://p2.yourdomain.com.
<br>
To do this, first find the DNS settings for wherever you've purchased your domain and create a new "A" record that points to the IP address of your server. You can find the IP address of your server by running this command line:
<textarea class="code" id="code-14" style="display: none; ">ping yourdomain.com</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>ping yourdomain.com</pre></div></div></div></div></div></div></div>

Example:<br>
<img src="./framework_files/00002909.png">
<br><br>
Next, log in to your server's cPanel (usually the URL is https://yourdomain.com:2083)  and find the option to create a new subdomain. 
<br><br>
Create the p2 subdomain, and set it to point to your p2.yourdomain.com directory

<img class="responsive" src="./framework_files/00002885.png">

<br>
After you click Create, point your browser to http://p2.yourdomain.com. 
<br><br>
If things went smoothly, you should see the same Hello World message you saw when you loaded your app on your local server.
<br><br>
If you get a DNS error, it's likely that the DNS changes you made haven't propagated yet. Often this is just a waiting game, but you can try flushing your DNS cache by following <a href="http://www.techiecorner.com/35/how-to-flush-dns-cache-in-linux-windows-mac/">these instructions</a>.
<br><br>
If after 30 minutes to an hour, your application still isn't loading, try the following:

<ul>
<li>Ask a friend on a different WiFi connection to try your URL
</li><li>Test your URL from your smartphone (make sure your phone is on a cell connection, not the same WiFi connection your computer is using)
</li><li>Test the url at <a href="http://downforeveryoneorjustme.com/">http://downforeveryoneorjustme.com</a>
</li></ul>

If it works in any of those cases, you know it's just an issue of your connection caching a old DNS setting and it needs more time.
<br><br>
If it doesn't work, you have some troubleshooting to do. 
</div>







<div class="page">
<h2><a name="Checkpoint"></a>Checkpoint</h2>
At this point your basic installation and setup for both the framework and your first app are complete. You should be able to view your application on both your local and your live server. 
</div>







<div class="page">
<h2><a name="Updates"></a>Updates</h2>
Throughout the duration of the course this framework will need updates. Because of this, as already mentioned, it will be important that you do not edit anything in the <span class="variable">core/</span> directory.
<br><br>
If an update is released, you will need to download the framework again (<strong><a href="https://github.com/susanBuck/framework/zipball/master">framework.zip</a></strong>) and replace <strong>only</strong> the <span class="variable">core/</span> directory in your local server (no need to update the live server since version control will take care of that). 
<br><br>
Do not replace environment.php or any applications you have started because you will lose any changes and customizations you've made.
</div>









<div class="page">
<h2><a name="Object Oriented Programming"></a>Object Oriented Programming</h2>
With everything installed and our first application running, let's dig into how to use this framework.
<br><br>
First off, it's important to talk about Object Oriented Programming which is the programming style this framework uses; OOP adds even more organization, structure and design to our code.
<br><br>
If OOP is new to you, we <em>strongly</em> suggest reading this guide before proceeding: <a href="http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/">Object-Oriented PHP for Beginners</a> and as extra re-iteration, <a href="http://net.tutsplus.com/tutorials/php/oop-in-php/">Learning OOP in PHP</a>. 
<br><br>
Throughout the rest of the notes, if we skim over a OOP realted term, we'll link to these latter tutorials so you can search that topic to learn more about what it does and how to use it.

<br><br>
<strong>Procedural Programming</strong><br>
<ul>
<li>Executes code line by line: do this, then this, then this...
</li><li>Very much what we've been doing with our pick-up PHP approach
</li><li>Not inherently modular
</li></ul>

<br>
<strong>Object Oriented Programming</strong>
<ul>
<li>Programming using Classes (ex. a blueprint for a house) and Objects (the house you build from that blueprint)
</li><li>Each Class manages its own methods (class specific functions) and properties
</li><li>Good "team player" paradigm
</li><li>Focus on readability, convention, DRY
</li></ul>

<textarea class="code" id="code-15" style="display: none; ">&lt;?
class Image {
	
	# Class attributes
	protected $image;
	protected $width;
	protected $height;
	protected $mimetype;
	
	function __construct($filename) {
		
		# Read the image file to a binary buffer
		$fp = fopen($filename, 'rb') or die("Image '$filename' not found!");
		$buf = '';
		while(!feof($fp))
			$buf .= fgets($fp, 4096);
		
		# Create image and assign it to our variable
		$this-&gt;image = imagecreatefromstring($buf);
		
		# Extract image information
		$info           = getimagesize($filename);
		$this-&gt;width    = $info[0];
		$this-&gt;height   = $info[1];
		$this-&gt;mimetype = $info['mime'];
	}
	
	public function display() {
		header("Content-type: {$this-&gt;mimetype}");
		switch($this-&gt;mimetype) {
			case 'image/jpeg': imagejpeg($this-&gt;image); break;
			case 'image/png': imagepng($this-&gt;image); break;
			case 'image/gif': imagegif($this-&gt;image); break;
		}
		//exit;
	}
	
	public function resize($width, $height) {
		$thumb = imagecreatetruecolor($width, $height);
		imagecopyresampled($thumb, $this-&gt;image, 0, 0, 0, 0, $width, $height, $this-&gt;width, $this-&gt;height);
		$this-&gt;image = $thumb;
	}
}

# Here's how we use the above Class
	$thumb = new Image("image.jpg");
	$thumb-&gt;display();
	$thumb-&gt;resize(200,200);
	$thumb-&gt;display();


?&gt;</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 690.4000000000001px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 691px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre><pre>23</pre><pre>24</pre><pre>25</pre><pre>26</pre><pre>27</pre><pre>28</pre><pre>29</pre><pre>30</pre><pre>31</pre><pre>32</pre><pre>33</pre><pre>34</pre><pre>35</pre><pre>36</pre><pre>37</pre><pre>38</pre><pre>39</pre><pre>40<br>&nbsp;</pre><pre>41</pre><pre>42</pre><pre>43</pre><pre>44</pre><pre>45</pre><pre>46</pre><pre>47</pre><pre>48</pre><pre>49</pre><pre>50</pre><pre>51</pre><pre>52</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">class</span> <span class="cm-word">Image</span> {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Class attributes</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">protected</span> <span class="cm-variable-2">$image</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-keyword">protected</span> <span class="cm-variable-2">$width</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-keyword">protected</span> <span class="cm-variable-2">$height</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-keyword">protected</span> <span class="cm-variable-2">$mimetype</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">function</span> <span class="cm-word">__construct</span>(<span class="cm-variable-2">$filename</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Read the image file to a binary buffer</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$fp</span> <span class="cm-operator">=</span> <span class="cm-word">fopen</span>(<span class="cm-variable-2">$filename</span>, <span class="cm-string">'rb'</span>) <span class="cm-keyword">or</span> <span class="cm-keyword">die</span>(<span class="cm-string">"Image '$filename' not found!"</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$buf</span> <span class="cm-operator">=</span> <span class="cm-string">''</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">while</span>(<span class="cm-operator">!</span><span class="cm-word">feof</span>(<span class="cm-variable-2">$fp</span>))</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$buf</span> .<span class="cm-operator">=</span> <span class="cm-word">fgets</span>(<span class="cm-variable-2">$fp</span>, <span class="cm-number">4096</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Create image and assign it to our variable</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">image</span> <span class="cm-operator">=</span> <span class="cm-word">imagecreatefromstring</span>(<span class="cm-variable-2">$buf</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Extract image information</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$info</span>           <span class="cm-operator">=</span> <span class="cm-word">getimagesize</span>(<span class="cm-variable-2">$filename</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">width</span>    <span class="cm-operator">=</span> <span class="cm-variable-2">$info</span>[<span class="cm-number">0</span>];</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">height</span>   <span class="cm-operator">=</span> <span class="cm-variable-2">$info</span>[<span class="cm-number">1</span>];</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">mimetype</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$info</span>[<span class="cm-string">'mime'</span>];</pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">display</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">header</span>(<span class="cm-string">"Content-type: {$this-&gt;mimetype}"</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">switch</span>(<span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">mimetype</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">case</span> <span class="cm-string">'image/jpeg'</span>: <span class="cm-word">imagejpeg</span>(<span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">image</span>); <span class="cm-keyword">break</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">case</span> <span class="cm-string">'image/png'</span>: <span class="cm-word">imagepng</span>(<span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">image</span>); <span class="cm-keyword">break</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">case</span> <span class="cm-string">'image/gif'</span>: <span class="cm-word">imagegif</span>(<span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">image</span>); <span class="cm-keyword">break</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment">//exit;</span></pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">resize</span>(<span class="cm-variable-2">$width</span>, <span class="cm-variable-2">$height</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$thumb</span> <span class="cm-operator">=</span> <span class="cm-word">imagecreatetruecolor</span>(<span class="cm-variable-2">$width</span>, <span class="cm-variable-2">$height</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">imagecopyresampled</span>(<span class="cm-variable-2">$thumb</span>, <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">image</span>, <span class="cm-number">0</span>, <span class="cm-number">0</span>, <span class="cm-number">0</span>, <span class="cm-number">0</span>, <span class="cm-variable-2">$width</span>, <span class="cm-variable-2">$height</span>, <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">width</span>, <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">height</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">image</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$thumb</span>;</pre><pre><span class="cm-tab">    </span>}</pre><pre>}</pre><pre> </pre><pre><span class="cm-comment"># Here's how we use the above Class</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$thumb</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-word">Image</span>(<span class="cm-string">"image.jpg"</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$thumb</span><span class="cm-operator">-&gt;</span><span class="cm-word">display</span>();</pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$thumb</span><span class="cm-operator">-&gt;</span><span class="cm-word">resize</span>(<span class="cm-number">200</span>,<span class="cm-number">200</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$thumb</span><span class="cm-operator">-&gt;</span><span class="cm-word">display</span>();</pre><pre> </pre><pre> </pre><pre><span class="cm-meta">?&gt;</span></pre></div></div></div></div></div></div></div>



</div>











<div class="page">
<h2><a name="Routing / Controllers / Methods"></a>Routing / Controllers / Methods</h2>
The <em>pick-up</em> approach to PHP typically involves creating specific .php files responsible for different parts of your application. For example, if you wanted to display a user's profile, you might have a file called <span class="variable">profile.php</span> that was in charge of those features. 
<br><br>
With a framework, it doesn't work that way. Instead, your application is divided into logical pieces, each with its own role and area of focus. 
<br><br>
The way these pieces work together all starts with a concept called <strong>Routing</strong>.
<br><br>
Routing takes a given url such as <span class="variable">http://yourdomain.com/users/profile</span> and figures out which part of your application needs to run. 
<br><br>
Toss out the old idea of a urls digging into directories on your server. With a framework, we think of urls more as commands that run specific portions of our application.
<br><br>
<img class="responsive" src="./framework_files/00002933.png">

<br>
The first part of the url, <span class="variable">users</span>, is telling the application which <strong>controller</strong> to use and the second part <span class="variable">profile</span>  is telling which <strong>method</strong> to use.
<br><br>
To understand what controllers and methods are - first imagine your application is a large company. The most efficient way to run this company is to divide it into logical departments (controllers), each in charge of related tasks (methods).
<br><br>
So in our little start of an application, the first department we have is a Users department. This department, or controller, is in charge of all tasks related to users, including signups, logins, logouts or displaying a profile. Each of these tasks is a method in the User's controller.

<br><br>
If you dig into your application folder, you'll see a controllers folder, with two controller files to get you started.
<br>
<textarea class="code" id="code-16" style="display: none; ">/root/
----/dwa/
--------/core/
--------/environment.php
--------/myapp.com/
------------------/controllers/
-------------------------------/c_base.php
-------------------------------/c_index.php</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 114.4px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 115px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>/root/</pre><pre>----/dwa/</pre><pre>--------/core/</pre><pre>--------/environment.php</pre><pre>--------/myapp.com/</pre><pre>------------------/controllers/</pre><pre>-------------------------------/c_base.php</pre><pre>-------------------------------/c_index.php</pre></div></div></div></div></div></div></div>
<br>
Convention calls for each controller file to be prefixed with <span class="variable">"c_"</span> (this will come in handy when you have numerous files open in your text editor; you'll be able to quickly distinguish which files are the controllers).
<br><br>
Lets start building our users controller.
<br><br>
Create a new file <span class="variable">/p2.yourdomain.com/controllers/c_users.php</span>:
<textarea class="code" id="code-17" style="display: none; ">&lt;?php
class users_controller extends base_controller {

	public function __construct() {
		parent::__construct();
		echo "users_controller construct called&lt;br&gt;&lt;br&gt;";
	} 
	
	public function index() {
		echo "Welcome to the users's department";
	}
	
	public function signup() {
		echo "This is the signup page";
	}
	
	public function login() {
		echo "This is the login page";
	}
	
	public function logout() {
		echo "This is the logout page";
	}
	
	public function profile($user_name = NULL) {
		
		if($user_name == NULL) {
			echo "No user specified";
		}
		else {
			echo "This is the profile for ".$user_name;
		}
	}
		
} # end of the class</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 460px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 460px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre><pre>23</pre><pre>24</pre><pre>25</pre><pre>26</pre><pre>27</pre><pre>28</pre><pre>29</pre><pre>30</pre><pre>31</pre><pre>32</pre><pre>33</pre><pre>34</pre><pre>35</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-keyword">class</span> <span class="cm-word">users_controller</span> <span class="cm-keyword">extends</span> <span class="cm-word">base_controller</span> {</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">__construct</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">parent</span>::<span class="cm-word">__construct</span>();</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"users_controller construct called&lt;br&gt;&lt;br&gt;"</span>;</pre><pre><span class="cm-tab">    </span>} </pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">index</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"Welcome to the users's department"</span>;</pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">signup</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"This is the signup page"</span>;</pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">login</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"This is the login page"</span>;</pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">logout</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"This is the logout page"</span>;</pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">profile</span>(<span class="cm-variable-2">$user_name</span> <span class="cm-operator">=</span> <span class="cm-atom">NULL</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">if</span>(<span class="cm-variable-2">$user_name</span> <span class="cm-operator">==</span> <span class="cm-atom">NULL</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"No user specified"</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">else</span> {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"This is the profile for "</span>.<span class="cm-variable-2">$user_name</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre>} <span class="cm-comment"># end of the class</span></pre></div></div></div></div></div></div></div>

<br>
Some things to point out here:
<ul>
<li>Controllers are <a href="http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/">OOP Classes</a>

</li><li>You must append <span class="variable">_controller</span> to the name of your controller class in order for Routing to work.

</li><li>This class <span class="variable">users_controller</span> extends <span class="variable">base_controller</span>. That means it can use anything inside <span class="variable">base_controller</span>. This is called <strong><a href="http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/">class inheritance</a></strong>.

</li><li>All our methods have the visibility property of <a href="http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/">public</a> which means it can be accessed anywhere, both within the class and externally.

</li><li>The <span class="variable">__construct()</span> method is a <a href="http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/">magic method</a>. By default, it gets called every time this Class is called, no matter what method you're calling.
</li></ul>

With our Users controller built, lets try calling upon it and some of it's methods:
<br><br>
Examples:
<ul>
<li><span class="variable">http://localhost/users/signup</span>
</li><li><span class="variable">http://localhost/users/logout</span>
</li></ul>
They're not doing anything fancy yet, but this routing is the backbone for how applications are built.
<br><br>
Now try this url: <span class="variable">http://localhost/users/profile/joe</span>
<br><br>
With this one, we've added a third option to our url, "joe". Any option that comes after your controller/method can be sent to the method as a parameter, assuming that method is prepared to receive it, which the profile method is:

<textarea class="code" id="code-18" style="display: none; ">&lt;?
public function profile($user_name) {
	echo "Display the profile for ".$user_name
}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 63.2px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 64px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">profile</span>(<span class="cm-variable-2">$user_name</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"Display the profile for "</span>.<span class="cm-variable-2">$user_name</span></pre><pre>}</pre></div></div></div></div></div></div></div>
<br><br>

Summary:
<img class="responsive" src="./framework_files/00002907.png">
</div>





<div class="page">
<h2><a name="Special Routing"></a>Special Routing</h2>

Given what we've just learned about routing, what is going on when we hit <span class="variable">http://localhost</span> without specifying a controller or method?
<br><br>

In this case, we're defining a special route ourselves in <span class="variable">/p2.yourdomain.com/index.php</span>:
<textarea class="code" id="code-19" style="display: none; ">&lt;?
# Routing
Router::$routes = array(
	'/' =&gt; '/index',     # default controller when "/" is requested
);
</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 88.80000000000001px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 89px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-comment"># Routing</span></pre><pre><span class="cm-word">Router</span>::<span class="cm-variable-2">$routes</span> <span class="cm-operator">=</span> <span class="cm-keyword">array</span>(</pre><pre><span class="cm-tab">    </span><span class="cm-string">'/'</span> <span class="cm-operator">=&gt;</span> <span class="cm-string">'/index'</span>,     <span class="cm-comment"># default controller when "/" is requested</span></pre><pre>);</pre><pre> </pre></div></div></div></div></div></div></div>

This says if the user accesses <span class="variable">/</span> show them the <span class="variable">index</span> controller. 
<br><br>
So essentially when we hit <span class="variable">http://localhost</span> the system actually reads it as <span class="variable">http://localhost/index</span>.
<br><br>
Note that if we don't specify a method, it will look for an <span class="variable">http://localhost/index</span> method by default.
<br><br>
Yes, that's kind of confusing: we're calling the index method in the index controller. The reason we've called the controler index as well is because it's serving as the main index of the site; the default landing page. 
<br><br>
If you look at <span class="variable">/p2.yourdomain.com/controllers/c_index.php</span> you can see the index method at work inside the index controller:
<textarea class="code" id="code-20" style="display: none; ">&lt;?
class index_controller extends base_controller {

	public function __construct() {
		parent::__construct();
	} 
	
	
	# Access via http://yourapp.com/index/index/
	public function index() {
		
		# Any method that loads a view will commonly start with this
		# First, set the content of the template with a view file
			$this-&gt;template-&gt;content = View::instance('v_index_index');
			
		# Now set the &lt;title&gt; tag
			$this-&gt;template-&gt;title = "Hello World";
	
		# If this view needs any JS or CSS files
		# add their paths to this array so they will get loaded in the head
			$client_files = Array(
						""
	                    );
	    
	    	$this-&gt;template-&gt;client_files = Utils::load_client_files($client_files);   
	      		
		# Render the view
			echo $this-&gt;template;

	}
	
} // end class

</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 447.20000000000005px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 448px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre><pre>23</pre><pre>24</pre><pre>25</pre><pre>26</pre><pre>27</pre><pre>28</pre><pre>29</pre><pre>30</pre><pre>31</pre><pre>32</pre><pre>33</pre><pre>34</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">class</span> <span class="cm-word">index_controller</span> <span class="cm-keyword">extends</span> <span class="cm-word">base_controller</span> {</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">__construct</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">parent</span>::<span class="cm-word">__construct</span>();</pre><pre><span class="cm-tab">    </span>} </pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Access via http://yourapp.com/index/index/</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">index</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Any method that loads a view will commonly start with this</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># First, set the content of the template with a view file</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'v_index_index'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Now set the &lt;title&gt; tag</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">title</span> <span class="cm-operator">=</span> <span class="cm-string">"Hello World"</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># If this view needs any JS or CSS files</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># add their paths to this array so they will get loaded in the head</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$client_files</span> <span class="cm-operator">=</span> <span class="cm-word">Array</span>(</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">""</span></pre><pre><span class="cm-tab">    </span>                    );</pre><pre><span class="cm-tab">    </span>    </pre><pre><span class="cm-tab">    </span>    <span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">client_files</span> <span class="cm-operator">=</span> <span class="cm-word">Utils</span>::<span class="cm-word">load_client_files</span>(<span class="cm-variable-2">$client_files</span>);   </pre><pre><span class="cm-tab">    </span>      <span class="cm-tab">  </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Render the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span>;</pre><pre> </pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre>} <span class="cm-comment">// end class</span></pre><pre> </pre><pre> </pre></div></div></div></div></div></div></div>
<br>
Setting special routes in index.php essentially allows us to write short-cut URLs. 
<br><br>
Lets use this doc you're looking at as an example. The url you're accessing it at is <span class="variable">http://students.susanbuck.dev/framework</span> but this is just a short-cut for it's actual url <span class="variable">http://students.susanbuck.dev/docs/view/framework</span> - it's operating from the <span class="variable">view</span> method in the <span class="variable">docs</span> controller.
<br><br>
Because we knew this would be a frequently used URL, though, we wanted to shorten it up so we created this special route:
<textarea class="code" id="code-21" style="display: none; ">&lt;?
# Routing
    Router::$routes = array(
    	'/' =&gt; '/index',
    	'/framework' =&gt; '/docs/view/framework',
    );

</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 114.4px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 115px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-comment"># Routing</span></pre><pre>    <span class="cm-word">Router</span>::<span class="cm-variable-2">$routes</span> <span class="cm-operator">=</span> <span class="cm-keyword">array</span>(</pre><pre>    <span class="cm-tab">    </span><span class="cm-string">'/'</span> <span class="cm-operator">=&gt;</span> <span class="cm-string">'/index'</span>,</pre><pre>    <span class="cm-tab">    </span><span class="cm-string">'/framework'</span> <span class="cm-operator">=&gt;</span> <span class="cm-string">'/docs/view/framework'</span>,</pre><pre>    );</pre><pre> </pre><pre> </pre></div></div></div></div></div></div></div>
Note how we can multiple special routes - they just get added on to the array.
</div>




















<div class="page">
<h2><a name="Views"></a>Views</h2>

<strong>Logic vs. Display</strong><br>
Controllers are the logic portion of your application; they do all the "thinking" and processing required of your application, whether it be interacting with the database, running calculations or any other number of tasks. 
<br><br>
After all this processing, you typically want to render some results for the user in the browser - this is called the view. 
<br><br>
Views are only concerned with displaying the page so while they will be using PHP variables and some basic PHP constructs throughout, its primary focus is on HTML.
<br><br>
If we look back at our users controller, we see our methods are using the <span class="variable">echo</span> command to display information to the page from our Controller. 

<textarea class="code" id="code-22" style="display: none; ">&lt;?
public function profile($user_name) {
	echo "Display the profile for ".$user_name;
}
</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 76px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 76px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">profile</span>(<span class="cm-variable-2">$user_name</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"Display the profile for "</span>.<span class="cm-variable-2">$user_name</span>;</pre><pre>}</pre><pre> </pre></div></div></div></div></div></div></div>
<br>
This is a quick and dirty way to print results to the page, and we'll use it occasionally when developing, but to do this right we want to delegate that display work to a view:

<textarea class="code" id="code-23" style="display: none; ">&lt;?php
public function profile($user_name) {
		
	# Setup view
	$this-&gt;template-&gt;content = View::instance('v_users_profile');
	$this-&gt;template-&gt;title   = "Profile";

	# Pass information to the view
	$this-&gt;template-&gt;content-&gt;user_name = $user_name;
			
	# Render template
	echo $this-&gt;template;
			
}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 191.20000000000002px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 192px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">profile</span>(<span class="cm-variable-2">$user_name</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Setup view</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'v_users_profile'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">title</span>   <span class="cm-operator">=</span> <span class="cm-string">"Profile"</span>;</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Pass information to the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span><span class="cm-operator">-&gt;</span><span class="cm-word">user_name</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$user_name</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Render template</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre>}</pre></div></div></div></div></div></div></div>
<br>

Lets summarize what's going on here:

<ul>

<li><span class="variable">$this-&gt;template</span> is referencing a <strong>master template view</strong> which you can check out by opening <span class="variable">/p2.yourdomain.com/views/_v_template.php</span>. 

</li><li>To see where <span class="variable">$this-&gt;template</span> is created, check out <span class="variable">/p2.yourdomain.com/controllers/c_base.php</span>.

</li><li>The master template view is in charge of the overal HTML structure for every page in your application. That includes the doc type, the head, the body, etc. It also includes common CSS/JS files that we know our entire application will need (for example: jQuery).

</li><li>Convention calls for master template filenames to start with an underscore followed by v_ (ex: <span class="variable">_v_template.php</span>)

</li><li><span class="variable">$this-&gt;template-&gt;content</span>, is referencing <span class="variable">&lt;?=$content?&gt;</span> in <span class="variable">_v_template.php</span>, and in this case we're loading it with the view fragment <span class="variable">v_users_profile</span>.
<br>
<img src="./framework_files/00002934.png">

</li><li>Convention calls for view fragments to start with v_ (ex: <span class="variable">v_users_profile</span>)

</li><li>Whenever we see something like <span class="variable">View::instance('v_users_profile');</span> it's calling upon the <strong>View library</strong> (more on libraries later) which gets the content of the view file requested. We don't have to give it the path to the view file, or even the .php extension because the library knows where to look and will append .php itself.

</li><li>Once <span class="variable">$this-&gt;template-&gt;content</span> is loaded we can pass specific variables to the view fragment like so:
<span class="variable">$this-&gt;template-&gt;content-&gt;user_name = $user_name; </span>

</li></ul>

We've gotten a litle bit ahead of ourselves- <span class="variable">v_users_profile.php</span> doesn't exist let. Lets create it (note: when naming your views, you want to name them after the controller and method calling that view so they're easy to track down):
<br><br>
Create <span class="variable">/p2.yourdomain.com/views/v_users_profile.php</span>:
<textarea class="code" id="code-24" style="display: none; ">&lt;h1&gt;Profile&lt;/h1&gt;
&lt;h2&gt;&lt;?=$user_name?&gt;&lt;/h2&gt;</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 37.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 38px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-tag">&lt;h1&gt;</span>Profile<span class="cm-tag">&lt;/h1&gt;</span></pre><pre><span class="cm-tag">&lt;h2&gt;</span><span class="cm-meta">&lt;?</span><span class="cm-operator">=</span><span class="cm-variable-2">$user_name</span><span class="cm-meta">?&gt;</span><span class="cm-tag">&lt;/h2&gt;</span></pre></div></div></div></div></div></div></div>

Nothing too fancy yet, just a stub of HTML where we print out the user's name. Note how in this HTML page we don't need common HTML page structure elements like the doc type, the head tag, the body tag, etc. That's because it was all set in the master template.  
<br><br>
See how we're using <span class="variable">&lt;?=$user_name?&gt;</span> in our fragment? This is only possible because in our controller we passed the <span class="variable">$user_name</span> parameter to the content view.
<textarea class="code" id="code-25" style="display: none; ">&lt;?
# Pass information to the view
$this-&gt;template-&gt;content-&gt;user_name = $user_name;</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 50.400000000000006px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 51px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-comment"># Pass information to the view</span></pre><pre><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span><span class="cm-operator">-&gt;</span><span class="cm-word">user_name</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$user_name</span>;</pre></div></div></div></div></div></div></div>
<br><br>

This has been a lot of explanation, but we can sum it up with three main points:

<ol>
<li><span class="variable">$this-&gt;template</span> is the master template

</li><li>Specify your view fragment to be used in the master template like this:
<textarea class="code" id="code-26" style="display: none; ">$this-&gt;template-&gt;content = View::instance('v_users_profile');</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>$this-&gt;template-&gt;content = View::instance('v_users_profile');</pre></div></div></div></div></div></div></div>

</li><li>Pass variables to your fragment like this:
<textarea class="code" id="code-27" style="display: none; ">$this-&gt;template-&gt;content-&gt;user_name = $user_name;</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>$this-&gt;template-&gt;content-&gt;user_name = $user_name;</pre></div></div></div></div></div></div></div>



</li></ol></div>











<div class="page">
<h2><a name="Including JS/CSS in views"></a>Including JS/CSS in views</h2>
Right now, our simple little view isn't doing much work, but we can imagine it being much more robust and needing to include external JS and CSS files. We already talked about including universal CSS/JS files like jQuery via your master template, but each controller / method is going to have specific needs for which CSS/JS files it requires.
<br><br>
Typically we include CSS/JS files in the <span class="variable">&lt;head&gt;</span> of a HTML document, so how do we manage that for a particular view, if view stubs don't have a head?
<br><br>
The answer is to load them through the controller, when we set up that initial master template:
<textarea class="code" id="code-28" style="display: none; ">&lt;?php
public function profile($user_name) {
		
	# Set up view
		$this-&gt;template-&gt;content = View::instance('v_users_profile');
		$this-&gt;template-&gt;title   = "Profile";

	# Load CSS / JS
		$client_files = Array(
				"/css/users.css",
				"/js/users.js",
	            );
	
        $this-&gt;template-&gt;client_files = Utils::load_client_files($client_files);   

	# Pass information to the view
		$this-&gt;template-&gt;content-&gt;user_name = $user_name;
			
	# Render template
		echo $this-&gt;template;
			
}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 293.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 294px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">profile</span>(<span class="cm-variable-2">$user_name</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Set up view</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'v_users_profile'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">title</span>   <span class="cm-operator">=</span> <span class="cm-string">"Profile"</span>;</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Load CSS / JS</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$client_files</span> <span class="cm-operator">=</span> <span class="cm-word">Array</span>(</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"/css/users.css"</span>,</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"/js/users.js"</span>,</pre><pre><span class="cm-tab">    </span>            );</pre><pre><span class="cm-tab">    </span></pre><pre>        <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">client_files</span> <span class="cm-operator">=</span> <span class="cm-word">Utils</span>::<span class="cm-word">load_client_files</span>(<span class="cm-variable-2">$client_files</span>);   </pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Pass information to the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span><span class="cm-operator">-&gt;</span><span class="cm-word">user_name</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$user_name</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Render template</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre>}</pre></div></div></div></div></div></div></div>

On lines 9-12 we create an array of all the external CSS/JS files we want.
<br><br>
Then on line 14 we pass that array to the template's <span class="variable">client_files</span> variable with this command: <span class="variable">Utils::load_client_files($client_files)</span>.
</div>









<div class="page">
<h2><a name="Libraries"></a>Libraries</h2>
So far we've glossed over two important lines of code, first when we were working on views:
<textarea class="code" id="code-29" style="display: none; ">$this-&gt;template-&gt;content = View::instance('v_users_profile');</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>$this-&gt;template-&gt;content = View::instance('v_users_profile');</pre></div></div></div></div></div></div></div>
<br>
And just now when we were talking about loading client files:
<textarea class="code" id="code-30" style="display: none; ">$this-&gt;template-&gt;client_files = Utils::load_client_files($client_files);</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>$this-&gt;template-&gt;client_files = Utils::load_client_files($client_files);</pre></div></div></div></div></div></div></div>
<br>
These two lines of code were taking advantage of libraries that are built into the framework. Open <span class="variable">/core/libraries/</span> to see what other libraries are at our disposal:
<br><br>
<ul>
	<li>DB.php
	</li><li>Debug.php
	</li><li>Email.php
	</li><li>File.php
	</li><li>Form.php
	</li><li>Geolocate.php
	</li><li>Image.php
	</li><li>Log.php
	</li><li>Router.php
	</li><li>Test.php
	</li><li>Time.php
	</li><li>Upload.php
	</li><li>User.php
	</li><li>Utils.php
	</li><li>View.php
</li></ul>

Each library contains a Class of the same name, and is programmed to do one job really well. 
<br><br>
For example: 
<ul>
<li>The Image library is packed with methods that help us manipulate image files (shrink them, grow them, crop them, etc). 
</li><li>The Router library takes care of all the magic that happens when we append a controller and method name to a url.
</li><li>The DB library gives us everything we need to interact with the database (more on this later).
</li></ul>

You can shuffle through the library files to get a better sense of what their jobs entail.

<br><br>

<strong>Auto-loading</strong><br>
In <em>pick-up</em> PHP when you wanted to use a function or method in another PHP file like these libraries, you would have to include that PHP file in your script like so:

<textarea class="code" id="code-31" style="display: none; ">&lt;? require_once("/core/libraries/DB.php");</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span> <span class="cm-keyword">require_once</span>(<span class="cm-string">"/core/libraries/DB.php"</span>);</pre></div></div></div></div></div></div></div>
<br>
If you've ever worked this way, you know it can get frustrating because you have to keep track of what methods your application is calling and make sure the necessary Classes are loaded. You also have to make sure you weren't unncessarily loading Classes that weren't needed anymore, because that would be a performance drag on your application.
<br><br>
With a framework, life is improved with a technique called <strong>auto-loading</strong>. With auto-loading, when you call on a particlar Class, it will automatically load the necessary Class file (and if the file was already loaded, it won't do it again).
<br><br>
So when we were talking about views and we ran this line
<textarea class="code" id="code-32" style="display: none; ">&lt;? $this-&gt;template-&gt;client_files = Utils::load_client_files($client_files);</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">client_files</span> <span class="cm-operator">=</span> <span class="cm-word">Utils</span>::<span class="cm-word">load_client_files</span>(<span class="cm-variable-2">$client_files</span>);</pre></div></div></div></div></div></div></div>
The system made sure we had Utils.php loaded without us having to do anything.
</div>












<div class="page">
<h2><a name="Static vs. Instantiated Classes"></a>Static vs. Instantiated Classes</h2>

There are two ways you can call a method from a class:
<br><br>
<strong>Static</strong><br>
If a method in a library contains the word static in front of it, it means we can call that statically (i.e. we don't have to instantiate an object of that class in order to use it.)
<br><br>
To statically call a method, you use the name of the Class followed by two colons, followed by the method name (and then pass in parameters if needed).
<br><br>
Example:
<textarea class="code" id="code-33" style="display: none; ">&lt;? $this-&gt;template-&gt;content = View::instance('v_users_profile');</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'v_users_profile'</span>);</pre></div></div></div></div></div></div></div>

<br>
<strong>Instantiated</strong><br>
If methods aren't labeled as static, it means we need to instantiate an Object of that Class in order to use it.

<textarea class="code" id="code-34" style="display: none; ">&lt;?
# Instantiate User obj
	$this-&gt;userObj = new User();
			
# Authenticate / load user
	$this-&gt;user = $this-&gt;userObj-&gt;authenticate();</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 88.80000000000001px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 89px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-comment"># Instantiate User obj</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">userObj</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-word">User</span>();</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-comment"># Authenticate / load user</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">userObj</span><span class="cm-operator">-&gt;</span><span class="cm-word">authenticate</span>();</pre></div></div></div></div></div></div></div>

<br>	
<strong>Why the difference?</strong><br>
Static methods are good "once off" methods. Utils is a great example of a lot of "once off" methods where you need to perform some isolated action, and the methods and data they're dealing with aren't necessarily related. 
<br><br>
Instantiated methods are useful when you have a well defined Object, such as the case with User. Part of the usefulness comes from the fact that each Object will have it's own set of properties. If you were using User statically, you'd have to pass in those properties each time, but when you create an Object the properties are stored.
</div>











<div class="page">
<h2><a name="Creating your own libraries"></a>Creating your own libraries</h2>
As you start working on you're project, you will find that just as the framework as a whole benefits from shared Classes, so will your application.

You can create your own application specific libraries by following these rules:
<br><br>
<ul>
	<li>Store all application specific libraries in your application's library folder.
	</li><li>Make sure the Class file name starts with a capital letter
	</li><li>Make sure the Class name matches the file name.
	</li><li>Conventions calls for your Class names to be singular.
</li></ul>

Example: If we were building a teaching based application, we might have a need for a Quiz Class, so we'd start it something like this:
<br><br>
<span class="variable">/myapp.com/libraries/Quiz.php:</span>
<textarea class="code" id="code-35" style="display: none; ">&lt;?
class Quiz {
	
	public function __construct() {

	}
	
	public function display_question() {
				
	}
	
	public function show_hint() {
	
	}
	
	public function check_answers() {
				
	}

}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 268px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 268px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">class</span> <span class="cm-word">Quiz</span> {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">__construct</span>() {</pre><pre> </pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">display_question</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">show_hint</span>() {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">check_answers</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>}</pre><pre> </pre><pre>}</pre></div></div></div></div></div></div></div>
</div>












<div class="page">

<h2><a name="End goal: a simple micro-blog"></a>End goal: a simple micro-blog</h2>
At this point, we have a solid foundation of what we need to use this framework, so lets start pulling these details into a real, working application. 
<br><br>
Starting from now, the notes will be moving in the direction of creating a simple micro-blogging platform. 
<br>
<img src="./framework_files/00002919.png">
<br>
Here are the steps we are going to take:
<ol>
<li>Set up the database
</li><li>Implement basic user login functionality
</li><li>Add the ability to add a new post
</li></ol>

</div>




<div class="page">
<h2><a name="Creating the local database"></a>Creating the local database</h2>
Just like your code base, you'll want to maintain a local copy of a database for development and a live copy for production. Lets start with the local.
<br><br>
We'll create, edit and maintain our databases via a tool called phpMyAdmin<sup>1</sup> which comes installed by default with MAMP/WAMP and most LAMP based web hosts.
<br><br>
You should be able to access phpMyAdmin on your local server via this URL: http://localhost/phpMyAdmin (case sensitive). It's also available from the MAMP start page or the WAMP menu.
<br><br>
From phpMyAdmin, find the Database tab and create a new database called <span class="variable">p2_yourdomain_com</span> and set the collation<sup>2</sup> to <span class="variable">utf8_general_ci</span>
<br>
<img src="./framework_files/00002950.png">
<br>
We want our database name to match the name of our application, but some servers won't allow periods in database names. Because of this, the convention of this framework calls for us to replace the periods with underscores.
<br><br>

Now that you know the name of your database, you should set it in your config:
<span class="variable">/p2.yourdomain.com/config/config.php/</span>
<textarea class="code" id="code-36" style="display: none; ">&lt;?
# Default database name for this app
define('DB_NAME', "p2_yourdomain_com");</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 50.400000000000006px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 51px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-comment"># Default database name for this app</span></pre><pre><span class="cm-word">define</span>(<span class="cm-string">'DB_NAME'</span>, <span class="cm-string">"p2_yourdomain_com"</span>);</pre></div></div></div></div></div></div></div>


<div class="footnotes">
1. phpMyAdmin is a good tool to start with simply because it's so ubiquitous, but as you work more with databases you may appreciate a standalone application such as <a href="http://www.sequelpro.com/">SequelPro</a> or <a href="http://heidisql.com/">HeidiSQL</a>
<br><br>
2. Collation determines the order (i.e alphabetic) to use when sorting character sets. A character set is a collection of symbols (letters, numbers, punctuation, and special characters), when used together, represent meaningful words in a language. 

</div>

</div>











<div class="page">
<h2><a name="Connecting to the local database"></a>Connecting to the local database</h2>
Now lets tell our application how to connect to this database we just created. 
<br><br>
Open up your local <span class="variable">environment.php</span> file and look for this bit of code:

<textarea class="code" id="code-37" style="display: none; ">&lt;?
# Toggle this based on whether you want to connect to your local DB or your live DB
define('REMOTE_DB', FALSE);

if (REMOTE_DB) {
	define('DB_HOST', '');
	define('DB_USER', '');
	define('DB_PASS', '');

} else {
	define('DB_HOST', 'localhost');
	define('DB_USER', 'root');
	define('DB_PASS', '');	
}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 191.20000000000002px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 192px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-comment"># Toggle this based on whether you want to connect to your local DB or your live DB</span></pre><pre><span class="cm-word">define</span>(<span class="cm-string">'REMOTE_DB'</span>, <span class="cm-atom">FALSE</span>);</pre><pre> </pre><pre><span class="cm-keyword">if</span> (<span class="cm-word">REMOTE_DB</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-word">define</span>(<span class="cm-string">'DB_HOST'</span>, <span class="cm-string">''</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-word">define</span>(<span class="cm-string">'DB_USER'</span>, <span class="cm-string">''</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-word">define</span>(<span class="cm-string">'DB_PASS'</span>, <span class="cm-string">''</span>);</pre><pre> </pre><pre>} <span class="cm-keyword">else</span> {</pre><pre><span class="cm-tab">    </span><span class="cm-word">define</span>(<span class="cm-string">'DB_HOST'</span>, <span class="cm-string">'localhost'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-word">define</span>(<span class="cm-string">'DB_USER'</span>, <span class="cm-string">'root'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-word">define</span>(<span class="cm-string">'DB_PASS'</span>, <span class="cm-string">''</span>);<span class="cm-tab">  </span></pre><pre>}</pre></div></div></div></div></div></div></div>
<br><br>
For the local database connection, we're concerned with the code in the <span class="variable">else</span> block. Your environment file came preloaded with the default local server credentials, but you can confirm this from phpMyAdmin:

<img class="responsive" src="./framework_files/00002928.png">
<br>
For MAMP users the defaut password is typically "root" and for WAMP users it's blank (as shown above in the code).
<br><br>
We'll deal with the <span class="variable">REMOTE_DB</span> settings later.


</div>










<div class="page">
<h2><a name="Tables"></a>Tables</h2>
Our first table will be called <span class="variable">users</span> (table names should be plural and lowercase) and it will contain 8 fields:<br>
<img src="./framework_files/00002971.png">
<br><br>

Lets go through this field by field:<br>
<img class="responsive" src="./framework_files/00002921.png">
<br><br>

<strong>1. <span class="variable">user_id</span></strong><br>
Every table should start off with a unique, primary id field. 
<br><br>
Convention says to name your primary id field the singular version of your table name, with _id appended. In this case, "users" becomes "user_id"
<br><br>
The type we're choosing is INT because it will always be a whole number.
<br><br>
We check off <span class="variable">A_I</span> (Auto Increment) which means every time we add a new row in this table, this field will automatically be incremented. This prevent's creating duplicate primary ids.
<br><br>

<strong>2. <span class="variable">created</span></strong><br>
This field will hold a whole number Unix timestamp<sup>1</sup> recording when the user was created; given that, set the Type to <span class="variable">INT</span>.
<br><br>

<strong>3. <span class="variable">modified</span></strong><br>
Every time we update the a user, we can track when that modification happened. Just like created, set the Type to <span class="variable">INT</span>
<br><br>

<strong>4. <span class="variable">token</span></strong><br>
Token is going to store a hashed string we'll use for login purposes. It will be a mixture of letters and characters, so we'll use <span class="variable">VARCHAR</span> as it's type. <span class="variable">VARCHAR</span> requires you specify a default Length/Value, so we'll just set it to the max for now which is 255 characters. 
<br><br>
<span class="variable">VARCHAR</span> is good for short strings of text, but if you needed to store more characters, say a 'description' field, you would want to use the type <span class="variable">TEXT</span>.
<br><br>

<strong>5,6,7,8. <span class="variable">password, first_name, last_name, email</span></strong><br>
The remaining fields will also do well with the <span class="variable">VARCHAR</span> type.

<br><br>

<a href="http://help.scibit.com/mascon/masconMySQL_Field_Types.html">You can read more about the MySQL field types here</a>

<div class="footnotes">
1. A Unix timestamp is a way to track time as a running total of seconds. This count starts at the Unix Epoch on January 1st, 1970. Therefore, the unix time stamp is merely the number of seconds between a particular date and the Unix Epoch. <a href="http://www.epochconverter.com/">Useful timestamp converter</a>.
</div>

</div>










<div class="page">
<h2><a name="Building the Sign up form"></a>Building the Sign up form</h2>
Next, lets create a simple sign up form which will be accessed by your users from <span class="variable">http://localhost/users/signup</span>
<br><br>
First lets create our view. We know the controller is <span class="variable">users</span> and the method is <span class="variable">signup</span> so our view file will be named <span class="variable">v_users_signup.php</span>
<br><br>
<span class="variable">/p2.yourdomain.com/views/v_users_signup.php</span>
<textarea class="code" id="code-38" style="display: none; ">&lt;form method='POST' action='/users/p_signup'&gt;

	First Name&lt;br&gt;
	&lt;input type='text' name='first_name'&gt;
	&lt;br&gt;&lt;br&gt;
	
	Last Name&lt;br&gt;
	&lt;input type='text' name='last_name'&gt;
	&lt;br&gt;&lt;br&gt;

	Email&lt;br&gt;
	&lt;input type='text' name='email'&gt;
	&lt;br&gt;&lt;br&gt;
	
	Password&lt;br&gt;
	&lt;input type='password' name='password'&gt;
	&lt;br&gt;&lt;br&gt;
	
	&lt;input type='submit'&gt;

&lt;/form&gt; </textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 280.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 281px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-tag">&lt;form</span> <span class="cm-attribute">method</span>=<span class="cm-string">'POST'</span> <span class="cm-attribute">action</span>=<span class="cm-string">'/users/p_signup'</span><span class="cm-tag">&gt;</span></pre><pre> </pre><pre><span class="cm-tab">    </span>First Name<span class="cm-tag">&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'text'</span> <span class="cm-attribute">name</span>=<span class="cm-string">'first_name'</span><span class="cm-tag">&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>Last Name<span class="cm-tag">&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'text'</span> <span class="cm-attribute">name</span>=<span class="cm-string">'last_name'</span><span class="cm-tag">&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;&lt;br&gt;</span></pre><pre> </pre><pre><span class="cm-tab">    </span>Email<span class="cm-tag">&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'text'</span> <span class="cm-attribute">name</span>=<span class="cm-string">'email'</span><span class="cm-tag">&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>Password<span class="cm-tag">&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'password'</span> <span class="cm-attribute">name</span>=<span class="cm-string">'password'</span><span class="cm-tag">&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'submit'</span><span class="cm-tag">&gt;</span></pre><pre> </pre><pre><span class="cm-tag">&lt;/form&gt;</span> </pre></div></div></div></div></div></div></div>

When this form submits, based on the <span class="variable">action</span> we set, it will process via <span class="variable">http://localhost.com/users/p_signup</span>.

<br><br>
Convention suggests you underscore methods that are in charge of processing POST information from a form with <span class="variable">p_</span> so they're easy to identify.
<br><br>

Given all that, here's our controller <span class="variable">/p2.yourdomain.com/controllers/c_users.php</span>
<textarea class="code" id="code-39" style="display: none; ">&lt;?

class users_controller extends base_controller {

	public function __construct() {
		parent::__construct();
	} 
	
	public function signup() {
		
		# Setup view
			$this-&gt;template-&gt;content = View::instance('v_users_signup');
			$this-&gt;template-&gt;title   = "Signup";
			
		# Render template
			echo $this-&gt;template;
		
	}
	
	public function p_signup() {
		
		# Dump out the results of POST to see what the form submitted
		print_r($_POST);
		
	}
		
} # end of the class</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 357.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 358px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre><pre>23</pre><pre>24</pre><pre>25</pre><pre>26</pre><pre>27</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre> </pre><pre><span class="cm-keyword">class</span> <span class="cm-word">users_controller</span> <span class="cm-keyword">extends</span> <span class="cm-word">base_controller</span> {</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">__construct</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">parent</span>::<span class="cm-word">__construct</span>();</pre><pre><span class="cm-tab">    </span>} </pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">signup</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Setup view</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'v_users_signup'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">title</span>   <span class="cm-operator">=</span> <span class="cm-string">"Signup"</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Render template</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">p_signup</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Dump out the results of POST to see what the form submitted</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">print_r</span>(<span class="cm-variable-2">$_POST</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre>} <span class="cm-comment"># end of the class</span></pre></div></div></div></div></div></div></div>
<br><br>
What we have so far:
<img class="responsive" src="./framework_files/00002940.png">

</div>












<div class="page">
<h2><a name="Processing the Sign up"></a>Processing the Sign up</h2>
Right now the method <span class="variable">p_signup</span> is just dumping our data to the page - lets take this a step further by processing that data into the database. 
<br><br>
To do this we're going to take advantage of the core DB library, so lets look at the <span class="variable">insert()</span> method from that library so we can understand how to use it:

<textarea class="code" id="code-40" style="display: none; ">&lt;?
# From /core/libraries/DB.php
# Insert a row given an array of key =&gt; values
public function insert($table, $data) {
					
	// setup insert statement
	$sql = "INSERT INTO $table SET";

	// add columns and values
	foreach ($data as $column =&gt; $value)
		$sql .= " $column = '".mysql_real_escape_string($value)."',";

	// remove trailing comma
	$sql = substr($sql, 0, -1);

	// perform query
	$this-&gt;query($sql);

	// return auto_increment id
	return mysql_insert_id();

}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 293.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 294px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-comment"># From /core/libraries/DB.php</span></pre><pre><span class="cm-comment"># Insert a row given an array of key =&gt; values</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">insert</span>(<span class="cm-variable-2">$table</span>, <span class="cm-variable-2">$data</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment">// setup insert statement</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$sql</span> <span class="cm-operator">=</span> <span class="cm-string">"INSERT INTO $table SET"</span>;</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment">// add columns and values</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">foreach</span> (<span class="cm-variable-2">$data</span> <span class="cm-keyword">as</span> <span class="cm-variable-2">$column</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">$value</span>)</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$sql</span> .<span class="cm-operator">=</span> <span class="cm-string">" $column = '"</span>.<span class="cm-word">mysql_real_escape_string</span>(<span class="cm-variable-2">$value</span>).<span class="cm-string">"',"</span>;</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment">// remove trailing comma</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$sql</span> <span class="cm-operator">=</span> <span class="cm-word">substr</span>(<span class="cm-variable-2">$sql</span>, <span class="cm-number">0</span>, <span class="cm-operator">-</span><span class="cm-number">1</span>);</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment">// perform query</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">query</span>(<span class="cm-variable-2">$sql</span>);</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment">// return auto_increment id</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">return</span> <span class="cm-word">mysql_insert_id</span>();</pre><pre> </pre><pre>}</pre></div></div></div></div></div></div></div>

Looking at this we can see the two parameters the DB insert method expects:

<ol>
<li><span class="variable">$table</span>: The table we're inserting into
</li><li><span class="variable">$data</span>: An associative array of data to enter, where the key is the DB field name.
</li></ol>

Because we made sure the name attributes on our form fields matched exactly what they are in the database, <span class="variable">$_POST</span> can be passed directly to the <span class="variable">insert</span> method as the data parameter. 

<img class="responsive" src="./framework_files/00002969.png">

<br><br>
The resulting SQL Query string that <span class="variable">DB::insert</span> makes and runs looks like this:
<textarea class="code" id="code-41" style="display: none; ">INSERT INTO users 
SET 
	first_name = 'Elvis', 
	last_name = 'Presley', 
	email = 'elvis@gmail.com', 
	password = '1234'</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 88.80000000000001px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 89px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>INSERT INTO users </pre><pre>SET </pre><pre><span class="cm-tab">    </span>first_name = 'Elvis', </pre><pre><span class="cm-tab">    </span>last_name = 'Presley', </pre><pre><span class="cm-tab">    </span>email = 'elvis@gmail.com', </pre><pre><span class="cm-tab">    </span>password = '1234'</pre></div></div></div></div></div></div></div>

A SQL Query string is a command that is sent to and processed by the database to Create, Read, Update and Delete data. We'll elaborate more on this in the next section.
<br><br>
But first, lets put the <span class="variable">insert</span> method to use to complete our sign-up. Here, we're zoomed in on the <span class="variable">p_signup</span> method in <span class="variable">c_users.php</span>
<textarea class="code" id="code-42" style="display: none; ">&lt;?
public function p_signup() {
		
	# Dump out the results of POST to see what the form submitted
	// print_r($_POST);
		
	# Insert this user into the database
	$user_id = DB::instance(DB_NAME)-&gt;insert("users", $_POST);
	
	# For now, just confirm they've signed up - we can make this fancier later
	echo "You're signed up";
		
}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 178.4px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 179px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">p_signup</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Dump out the results of POST to see what the form submitted</span></pre><pre><span class="cm-tab">    </span><span class="cm-comment">// print_r($_POST);</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Insert this user into the database</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$user_id</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">insert</span>(<span class="cm-string">"users"</span>, <span class="cm-variable-2">$_POST</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># For now, just confirm they've signed up - we can make this fancier later</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"You're signed up"</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre>}</pre></div></div></div></div></div></div></div>

With just one line of code (ln 8) we took the entire contents of a form and added it to the database, effectively "signing up" a user.
<br><br>
You may notice that the <span class="variable">created</span>, <span class="variable">modified</span> and <span class="variable">token</span> fields are blank in your table - we'll get to them shortly.

<br><br>

</div>








<div class="page">
<h2><a name="SQL"></a>SQL</h2>
Before we move on, lets talk a little more about SQL. Using the DB class as we are provides us with a lot of shortcuts but in the process it obstructs the basic functionaly of SQL and working with databases. Understanding this background will help us better understand how we interact with databases.
<br><br>
SQL<sup>1</sup> stands for <strong>Structured Query Language</strong>, and it's the language we use to communicate with databases to do our basic CRUD operations (Create, Read, Update, Delete).
<br><br>
Here's some examples of basic SQL commands:
<textarea class="code" id="code-43" style="display: none; "># CREATE
INSERT INTO table_name SET field1 = '$value1', field2 = '$value2'

# READ (i.e SELECT) with some filtering
SELECT * FROM table_name ORDER BY id ASC LIMIT 1

# UPDATE 
UPDATE table_name SET field = '$value' WHERE id = $id

# DELETE 
DELETE FROM table_name WHERE id = $id</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 152.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 153px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre># CREATE</pre><pre>INSERT INTO table_name SET field1 = '$value1', field2 = '$value2'</pre><pre> </pre><pre># READ (i.e SELECT) with some filtering</pre><pre>SELECT * FROM table_name ORDER BY id ASC LIMIT 1</pre><pre> </pre><pre># UPDATE </pre><pre>UPDATE table_name SET field = '$value' WHERE id = $id</pre><pre> </pre><pre># DELETE </pre><pre>DELETE FROM table_name WHERE id = $id</pre></div></div></div></div></div></div></div>
<br>

These SQL commands are run against your database using the built in PHP function <span class="variable"><a href="http://dochub.io/#php/mysql_query" target="_blank">mysql_query()</a></span> (if you look in the <span class="variable">DB::query</span> method, you'll see it's basically a wrapper for the <span class="variable">mysql_query()</span> function).
<br><br>
When testing and debugging, you can also run SQL queries directly in phpMyAdmin:

<img class="responsive" src="./framework_files/00002972.png">

Results in:
<img class="responsive" src="./framework_files/00002973.png">


<br><br>

We strongly suggest taking the time to go through a SQL tutorial to understand the basic of building queries. <a href="http://www.w3schools.com/sql/default.asp">w3schools SQL Basics</a> section is a good place to start as they cover the following topics:
<br><br>
<ul>
	<li><a href="http://www.w3schools.com/sql/sql_intro.asp">SQL Intro</a>
	</li><li><a href="http://www.w3schools.com/sql/sql_syntax.asp">SQL Syntax</a>
	</li><li><a href="http://www.w3schools.com/sql/sql_select.asp">SQL Select</a>
	</li><li><a href="http://www.w3schools.com/sql/sql_distinct.asp">SQL Distinct</a>
	</li><li><a href="http://www.w3schools.com/sql/sql_where.asp">SQL Where</a>
	</li><li><a href="http://www.w3schools.com/sql/sql_where.asp">SQL And &amp; Or</a>
	</li><li><a href="http://www.w3schools.com/sql/sql_orderby.asp">SQL Order By</a>
	</li><li><a href="http://www.w3schools.com/sql/sql_insert.asp">SQL Insert</a>
	</li><li><a href="http://www.w3schools.com/sql/sql_update.asp">SQL Update</a>
	</li><li><a href="http://www.w3schools.com/sql/sql_delete.asp">SQL Delete</a>
</li></ul>

For a second take, we also recommend reading through <a target="_blank" href="http://net.tutsplus.com/tutorials/databases/sql-for-beginners/">Nuttuts+ SQL for Beginners</a>
<br><br>

<strong>DB Methods and SQL</strong><br>
The methods in the DB library that enter data into the database are built to help us construct cumbersome queries. Instead of "building them by hand", we pass the method strings and arrays of information and it does the hard work of constructing that data into a SQL query. 
This means we can write code more efficiently.
<br><br>
We saw an example of this when we inserted a new user:
<textarea class="code" id="code-44" style="display: none; ">&lt;?
$user_id = DB::instance(DB_NAME)-&gt;insert("users", $_POST);</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 37.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 38px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-variable-2">$user_id</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">insert</span>(<span class="cm-string">"users"</span>, <span class="cm-variable-2">$_POST</span>);</pre></div></div></div></div></div></div></div>
<br>
Other methods that retrieve data, however, don't shine in creating your query but in how they're returning you the results - often in the form of an array.
<br><br>
Here's an example:
<textarea class="code" id="code-45" style="display: none; ">&lt;?
$users = DB::instance(DB_NAME)-&gt;select_rows("SELECT * FROM users");

# Print the results we get from the database which is returned to us in a nice array
print_r($users);</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 76px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 76px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-variable-2">$users</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">select_rows</span>(<span class="cm-string">"SELECT * FROM users"</span>);</pre><pre> </pre><pre><span class="cm-comment"># Print the results we get from the database which is returned to us in a nice array</span></pre><pre><span class="cm-word">print_r</span>(<span class="cm-variable-2">$users</span>);</pre></div></div></div></div></div></div></div>

<br>
Note, that you aren't required to always use the DB methods for your CRUD operations. Using the generic <span class="variable">query</span> method, you can run any raw SQL command. Example:
<textarea class="code" id="code-46" style="display: none; ">&lt;?
DB::instance(DB_NAME)-&gt;query("SELECT * FROM users WHERE first_name = 'Elvis'");</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 37.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 38px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">query</span>(<span class="cm-string">"SELECT * FROM users WHERE first_name = 'Elvis'"</span>);</pre></div></div></div></div></div></div></div>
<br><br>

<div class="footnotes">
1. SQL and MySQL are not the same thing. MySQL is one type of database system that uses SQL as it's language of choice. Other database systems (PostgreSQL, Oracle, etc.) also use SQL.
</div>

</div>











<div class="page">
<h2><a name="SQL Injection Attacks"></a>SQL Injection Attacks</h2>
Anytime you're accepting input from a user and running that input against your database, you want to guard against <a href="http://en.wikipedia.org/wiki/SQL_injection">SQL injection attacks</a>, where malicious users try to enter query strings in your web forms in an attempt to delete data, steal data, log in as other users, etc.
<br><br>
<img src="./framework_files/00002929.png"><br>
<small><a href="http://xkcd.com/327/">http://xkcd.com/327/</a></small>
<br><br>
The key to protecting your system against these kind of attacks is to "sanitize" your data from any potentially harmful strings (e.g. quotes) that could interfere with your query. 
<br><br>
Creation related methods from the DB library will automatically sanitize your data by running it through the built in PHP function <span class="variable"><a href="http://dochub.io/#php/mysql_real_escape_string" target="_blank">mysql_real_escape_string()</a></span>. 
<br><br>
Read related methods, however, can't be sanitized in the method, so you have use the <span class="variable">sanitize()</span> method on any <em>user entered variables</em> before running it against the database. The <span class="variable">sanitize()</span> method is just a wrapper for <span class="variable">mysql_real_escape_string()</span> with the extra benefit in that it will work on strings, arrays or multi-dimensional arrays.

<textarea class="code" id="code-47" style="display: none; ">&lt;?
# Prevent SQL injection attacks by sanitizing the data the user entered in the form
$_POST = DB::instance(DB_NAME)-&gt;sanitize($_POST);

$q = "SELECT token
	FROM users
	WHERE email = '".$_POST['email']."'
	AND password = '".$_POST['password']."'
	";
		
$token = DB::instance(DB_NAME)-&gt;select_field($q);</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 152.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 153px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-comment"># Prevent SQL injection attacks by sanitizing the data the user entered in the form</span></pre><pre><span class="cm-variable-2">$_POST</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">sanitize</span>(<span class="cm-variable-2">$_POST</span>);</pre><pre> </pre><pre><span class="cm-variable-2">$q</span> <span class="cm-operator">=</span> <span class="cm-string">"SELECT token</span></pre><pre><span class="cm-tab">    </span><span class="cm-string">FROM users</span></pre><pre><span class="cm-tab">    </span><span class="cm-string">WHERE email = '"</span>.<span class="cm-variable-2">$_POST</span>[<span class="cm-string">'email'</span>].<span class="cm-string">"'</span></pre><pre><span class="cm-tab">    </span><span class="cm-string">AND password = '"</span>.<span class="cm-variable-2">$_POST</span>[<span class="cm-string">'password'</span>].<span class="cm-string">"'</span></pre><pre><span class="cm-tab">    </span><span class="cm-string">"</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-variable-2">$token</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">select_field</span>(<span class="cm-variable-2">$q</span>);</pre></div></div></div></div></div></div></div>
 
<br><br>
Each method in the DB library comments notes whether the data needs to be sanitized or not, but for your reference, here's a breakdown of which ones do and don't:
<table border="0">
	<tbody><tr>
		<td style="width:50%">Creation Methods<br>Automatically sanitized</td>
		<td>Read Methods<br> Needs to be sanitized</td>
	</tr><tr>
		<td>
			<span class="variable">
			insert_row<br>
			insert_rows<br>
			update_row<br>
			update_rows<br>
			update_or_insert_row<br>
			update_or_insert_rows<br>
			</span>
		</td>
		
		<td>
			<span class="variable">
			select_field<br>
			select_row<br>
			select_rows<br>
			select_object<br>
			select_kv<br>
			select_array<br>
			delete<br>
		</span></td>
	</tr>
</tbody></table>

</div>















<div class="page">
<h2><a name="Encrypting password &amp; login token"></a>Encrypting password &amp; login token</h2>
We've got our user in the database table, but we still have work to do. The first problem is when we store the password in the DB it's in plain text form. 
<img class="responsive" src="./framework_files/00002930.png">
<br>
If we had a table full of users and our database ever got compromised, we'd be in big trouble - for a number of reasons - but primarly because we were exposing all of our user's passwords. 
<br><br>
To solve this problem, we want to encrypt this password, creating a "hashed" version we store in the database. We'll do that by taking what the users entered via <span class="variable">$_POST</span>, editing the value, and then putting it back so it's ready to go into the database.

<textarea class="code" id="code-48" style="display: none; ">&lt;?
public function p_signup() {
	
	# Dump out the results of POST to see what the form submitted
	print_r($_POST);
	
	# Encrypt the password	
	$_POST['password'] = sha1(PASSWORD_SALT.$_POST['password']);	
				
	# Insert this user into the database 
	$user_id = DB::instance(DB_NAME)-&gt;insert("users", $_POST);
	
}
?&gt;
</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 204px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 204px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">p_signup</span>() {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Dump out the results of POST to see what the form submitted</span></pre><pre><span class="cm-tab">    </span><span class="cm-word">print_r</span>(<span class="cm-variable-2">$_POST</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Encrypt the password<span class="cm-tab">  </span></span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$_POST</span>[<span class="cm-string">'password'</span>] <span class="cm-operator">=</span> <span class="cm-word">sha1</span>(<span class="cm-word">PASSWORD_SALT</span>.<span class="cm-variable-2">$_POST</span>[<span class="cm-string">'password'</span>]);<span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Insert this user into the database </span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$user_id</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">insert</span>(<span class="cm-string">"users"</span>, <span class="cm-variable-2">$_POST</span>);</pre><pre><span class="cm-tab">    </span></pre><pre>}</pre><pre><span class="cm-meta">?&gt;</span></pre><pre> </pre></div></div></div></div></div></div></div>

We used the built in PHP function <span class="variable"><a href="http://dochub.io/#php/sha1">sha1()</a></span> which does the encrypting using the "US Secure Hash Algorithm 1".
<br><br>
Note that we didn't hash just the password, but concatenated in the constant <span class="variable">PASSWORD_SALT</span>, which is defined in <span class="variable">/core/config/</span> but can be overwritten at the application level via <span class="variable">/p2.yourdomain.com/config/</span> (suggested). 
<br><br>
A salt is just a random string of text that will get added to every password, making them even harder to crack.
<br><br>
When we enter a new user with this updated code, our password looks much more secure:<br>
<img class="responsive" src="./framework_files/00002931.png">
<br><br>

</div>













<div class="page">
<h2><a name="Adding data to $_POST"></a>Adding data to $_POST</h2>
Most of the data we need for our user comes from what they typed into the sign up form (<span class="variable">$_POST</span>), but if you look at your users table you'll see that the created, modified and token field are all blank for new users. 
<br>
<img class="responsive" src="./framework_files/00002941.png">
<br><br>
Because this info doesn't come from what the user enters, we have to build that data ourselves, as seen here on line 8-10:

<textarea class="code" id="code-49" style="display: none; ">&lt;?
public function p_signup() {
	
	# Encrypt the password	
	$_POST['password'] = sha1(PASSWORD_SALT.$_POST['password']);
		
	# More data we want stored with the user	
	$_POST['created']  = Time::now();
	$_POST['modified'] = Time::now();
	$_POST['token']    = sha1(TOKEN_SALT.$_POST['email'].Utils::generate_random_string());
		
	# Insert this user into the database 
	$user_id = DB::instance(DB_NAME)-&gt;insert("users", $_POST);
			
}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 204px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 204px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">p_signup</span>() {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Encrypt the password<span class="cm-tab">  </span></span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$_POST</span>[<span class="cm-string">'password'</span>] <span class="cm-operator">=</span> <span class="cm-word">sha1</span>(<span class="cm-word">PASSWORD_SALT</span>.<span class="cm-variable-2">$_POST</span>[<span class="cm-string">'password'</span>]);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># More data we want stored with the user<span class="cm-tab">    </span></span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$_POST</span>[<span class="cm-string">'created'</span>]  <span class="cm-operator">=</span> <span class="cm-word">Time</span>::<span class="cm-word">now</span>();</pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$_POST</span>[<span class="cm-string">'modified'</span>] <span class="cm-operator">=</span> <span class="cm-word">Time</span>::<span class="cm-word">now</span>();</pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$_POST</span>[<span class="cm-string">'token'</span>]    <span class="cm-operator">=</span> <span class="cm-word">sha1</span>(<span class="cm-word">TOKEN_SALT</span>.<span class="cm-variable-2">$_POST</span>[<span class="cm-string">'email'</span>].<span class="cm-word">Utils</span>::<span class="cm-word">generate_random_string</span>());</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Insert this user into the database </span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$user_id</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">insert</span>(<span class="cm-string">"users"</span>, <span class="cm-variable-2">$_POST</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre>}</pre></div></div></div></div></div></div></div>
<br>
The fields created and modified (lines 8 and 9) are straightforward, we just want to store the current Unix timestamp. You could have called upon the built in PHP date function <span class="variable"><a href="http://dochub.io/#php/time">time()</a></span> to get the timestamp, but we used the Time library with the method <span class="variable">now()</span>. This method will allow us to easily mimick different times should our application ever call for it.
<br><br>

Token (line 10) is going to store a special string for login purposes. The string needs to encrypted just like the password field, but it will also include the user's email and a randomly generated string which we get from <span class="variable">Utils::generate_random_string()</span>.

</div>















<div class="page">
<h2><a name="Logging in"></a>Logging in</h2>
Now that we've created a user, we need to move on to building the functionality of having them logged in.
<br><br>
First, create your <span class="variable">login</span> method in <span class="variable">/p2.yourdomain.com/controllers/c_users.php</span> that will display the login page:

<textarea class="code" id="code-50" style="display: none; ">&lt;?
public function login() {

	# Setup view
		$this-&gt;template-&gt;content = View::instance('v_users_login');
		$this-&gt;template-&gt;title   = "Login";
		
	# Render template
		echo $this-&gt;template;
	
}
</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 165.60000000000002px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 166px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">login</span>() {</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Setup view</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'v_users_login'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">title</span>   <span class="cm-operator">=</span> <span class="cm-string">"Login"</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Render template</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span>;</pre><pre><span class="cm-tab">    </span></pre><pre>}</pre><pre> </pre></div></div></div></div></div></div></div>
<br>
Followed by your login view in <span class="variable">/p2.yourdomain.com/views/v_users_login.php</span>:

<textarea class="code" id="code-51" style="display: none; ">&lt;form method='POST' action='/users/p_login'&gt;

	Email&lt;br&gt;
	&lt;input type='text' name='email'&gt;
	
	&lt;br&gt;&lt;br&gt;
	
	Password&lt;br&gt;
	&lt;input type='password' name='password'&gt;

	&lt;br&gt;&lt;br&gt;
	
	&lt;input type='submit'&gt;

&lt;/form&gt;</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 204px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 204px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-tag">&lt;form</span> <span class="cm-attribute">method</span>=<span class="cm-string">'POST'</span> <span class="cm-attribute">action</span>=<span class="cm-string">'/users/p_login'</span><span class="cm-tag">&gt;</span></pre><pre> </pre><pre><span class="cm-tab">    </span>Email<span class="cm-tag">&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'text'</span> <span class="cm-attribute">name</span>=<span class="cm-string">'email'</span><span class="cm-tag">&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>Password<span class="cm-tag">&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'password'</span> <span class="cm-attribute">name</span>=<span class="cm-string">'password'</span><span class="cm-tag">&gt;</span></pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'submit'</span><span class="cm-tag">&gt;</span></pre><pre> </pre><pre><span class="cm-tag">&lt;/form&gt;</span></pre></div></div></div></div></div></div></div>
<br>
You should now see a simple login form at <span class="variable">http://localhost/users/login</span>.

<br><br>
Now, lets program the <span class="variable">p_login</span> method:
<textarea class="code" id="code-52" style="display: none; ">&lt;?
public function p_login() {
	
	# Sanitize the user entered data to prevent any funny-business (re: SQL Injection Attacks)
	$_POST = DB::instance(DB_NAME)-&gt;sanitize($_POST);
	
	# Hash submitted password so we can compare it against one in the db
	$_POST['password'] = sha1(PASSWORD_SALT.$_POST['password']);
	
	# Search the db for this email and password
	# Retrieve the token if it's available
	$q = "SELECT token 
		FROM users 
		WHERE email = '".$_POST['email']."' 
		AND password = '".$_POST['password']."'";
	
	$token = DB::instance(DB_NAME)-&gt;select_field($q);	
				
	# If we didn't get a token back, login failed
	if(!$token) {
			
		# Send them back to the login page
		Router::redirect("/users/login/");
		
	# But if we did, login succeeded! 
	} else {
			
		# Store this token in a cookie
		setcookie("token", $token, strtotime('+1 year'), '/');
		
		# Send them to the main page - or whever you want them to go
		Router::redirect("/");
					
	}

}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 472.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 473px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre><pre>23</pre><pre>24</pre><pre>25</pre><pre>26</pre><pre>27</pre><pre>28</pre><pre>29</pre><pre>30</pre><pre>31</pre><pre>32</pre><pre>33</pre><pre>34</pre><pre>35</pre><pre>36</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">p_login</span>() {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Sanitize the user entered data to prevent any funny-business (re: SQL Injection Attacks)</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$_POST</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">sanitize</span>(<span class="cm-variable-2">$_POST</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Hash submitted password so we can compare it against one in the db</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$_POST</span>[<span class="cm-string">'password'</span>] <span class="cm-operator">=</span> <span class="cm-word">sha1</span>(<span class="cm-word">PASSWORD_SALT</span>.<span class="cm-variable-2">$_POST</span>[<span class="cm-string">'password'</span>]);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Search the db for this email and password</span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Retrieve the token if it's available</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$q</span> <span class="cm-operator">=</span> <span class="cm-string">"SELECT token </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">FROM users </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">WHERE email = '"</span>.<span class="cm-variable-2">$_POST</span>[<span class="cm-string">'email'</span>].<span class="cm-string">"' </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">AND password = '"</span>.<span class="cm-variable-2">$_POST</span>[<span class="cm-string">'password'</span>].<span class="cm-string">"'"</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$token</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">select_field</span>(<span class="cm-variable-2">$q</span>);<span class="cm-tab">   </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># If we didn't get a token back, login failed</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">if</span>(<span class="cm-operator">!</span><span class="cm-variable-2">$token</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Send them back to the login page</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">Router</span>::<span class="cm-word">redirect</span>(<span class="cm-string">"/users/login/"</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># But if we did, login succeeded! </span></pre><pre><span class="cm-tab">    </span>} <span class="cm-keyword">else</span> {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Store this token in a cookie</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">setcookie</span>(<span class="cm-string">"token"</span>, <span class="cm-variable-2">$token</span>, <span class="cm-word">strtotime</span>(<span class="cm-string">'+1 year'</span>), <span class="cm-string">'/'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Send them to the main page - or whever you want them to go</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">Router</span>::<span class="cm-word">redirect</span>(<span class="cm-string">"/"</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>}</pre><pre> </pre><pre>}</pre></div></div></div></div></div></div></div>

That's a lot of code at once, so read through each comment to see what each piece is doing.
<br><br>
Here's the gist of what it's doing:

<ul>

<li>We verify whether a user should be logged in by whether we have a matching email and password in the database.</li>

<li>If they pass the latter test, store the token in a cookie in their browser.</li>

<li>That cookie is the key to the application, telling us if this user has been authorized and is logged in. </li>

<li>If they had a succesful login, we send them to the application homepage. If they failed, we send them back to the login page.</li>
</ul>
</div>











<div class="page">
<h2><a name="Authenticating"></a>Authenticating</h2>
Throughout your application you're going to want to authenticate your user to see if they're logged in. You'll do this for two reasons:

<ol>
	<li>When needed, to keep them out of "members only" areas of your site
	</li><li>To have access to the data related to that user
</li></ol>

Authentication is already baked into the sample application that came with the framework, so lets look at how it works. 
<br><br>
Open up your base controller at <span class="variable">/p2.yourdomain.com/controllers/c_base.php</span>
<br><br>
If you'll remember from several sections ago, all our controllers extends the base controller, which means by doing authentication here, it will be available throughout our application.

<textarea class="code" id="code-53" style="display: none; ">&lt;?
class base_controller {
	
	public $user;
	public $userObj;
	public $template;
	public $email_template;

	public function __construct() {
	
		# Instantiate a User object
			$this-&gt;userObj = new User();
			
		# Authenticate / load user
			$this-&gt;user = $this-&gt;userObj-&gt;authenticate();			
							
		# Set up templates
			$this-&gt;template 	  = View::instance('_v_template');
			$this-&gt;email_template = View::instance('_v_email');			
								
		# So we can use $user in views			
			$this-&gt;template-&gt;set_global('user', $this-&gt;user);
						
	}
	
} 
</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 357.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 358px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre><pre>23</pre><pre>24</pre><pre>25</pre><pre>26</pre><pre>27</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">class</span> <span class="cm-word">base_controller</span> {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-variable-2">$user</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-variable-2">$userObj</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-variable-2">$template</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-variable-2">$email_template</span>;</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">__construct</span>() {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Instantiate a User object</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">userObj</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-word">User</span>();</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Authenticate / load user</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">userObj</span><span class="cm-operator">-&gt;</span><span class="cm-word">authenticate</span>();<span class="cm-tab">   </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Set up templates</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span> <span class="cm-tab">    </span>  <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'_v_template'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">email_template</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'_v_email'</span>);<span class="cm-tab"> </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># So we can use $user in views<span class="cm-tab">  </span><span class="cm-tab">    </span><span class="cm-tab">    </span></span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">set_global</span>(<span class="cm-string">'user'</span>, <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre>} </pre><pre> </pre></div></div></div></div></div></div></div>
<br>
The lines we care about here are 12, 15 and 22.
<br><br>
Line 12: 
<textarea class="code" id="code-54" style="display: none; ">&lt;?
$this-&gt;userObj = new User();</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 37.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 38px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">userObj</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-word">User</span>();</pre></div></div></div></div></div></div></div>
Instantiate a object from the User Class so we can have access to all its methods.

<br><br>
Line 15: 
<textarea class="code" id="code-55" style="display: none; ">&lt;?
$this-&gt;user = $this-&gt;userObj-&gt;authenticate();</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 37.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 38px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">userObj</span><span class="cm-operator">-&gt;</span><span class="cm-word">authenticate</span>();</pre></div></div></div></div></div></div></div>
Call the authenticate method and store the results in <span class="variable">$this-&gt;user</span>. If this line is succesful at authenticating the user, then <span class="variable">$this-&gt;user</span> will be loaded with all data we have about that user from the Users table. If it fails, it will be blank and that will be our cue that the user is not logged in.
<br>
<br>
Line 22: 
<textarea class="code" id="code-56" style="display: none; ">&lt;?
$this-&gt;template-&gt;set_global('user', $this-&gt;user);</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 37.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 38px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">set_global</span>(<span class="cm-string">'user'</span>, <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span>);</pre></div></div></div></div></div></div></div>
This makes it so the data in <span class="variable">$this-&gt;user</span> is easily accessible from View files, which will come in handy since our View files will often be catered towards a specific user's data.

<br><br>
With this work done, lets take it for a test run making our profile page require login.
<br><br>

<span class="variable">/p2.yourdomain.com/controllers/c_users.php </span>
<textarea class="code" id="code-57" style="display: none; ">&lt;?
public function profile() {

	# If user is blank, they're not logged in, show message and don't do anything else
	if(!$this-&gt;user) {
		echo "Members only. &lt;a href='/users/login'&gt;Login&lt;/a&gt;";
		
		# Return will force this method to exit here so the rest of 
		# the code won't be executed and the profile view won't be displayed.
		return false;
	}
	
	# Setup view
	$this-&gt;template-&gt;content = View::instance('v_users_profile');
	$this-&gt;template-&gt;title   = "Profile of".$this-&gt;user-&gt;first_name;
		
	# Render template
	echo $this-&gt;template;
}
</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 268px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 268px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">profile</span>() {</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment"># If user is blank, they're not logged in, show message and don't do anything else</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">if</span>(<span class="cm-operator">!</span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"Members only. &lt;a href='/users/login'&gt;Login&lt;/a&gt;"</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Return will force this method to exit here so the rest of </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># the code won't be executed and the profile view won't be displayed.</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">return</span> <span class="cm-atom">false</span>;</pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Setup view</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'v_users_profile'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">title</span>   <span class="cm-operator">=</span> <span class="cm-string">"Profile of"</span>.<span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span><span class="cm-operator">-&gt;</span><span class="cm-word">first_name</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Render template</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span>;</pre><pre>}</pre><pre> </pre></div></div></div></div></div></div></div>

<br>
<span class="variable">/p2.yourdomain.com/views/v_users_profile.php</span>
<br> (this should already exist from earlier, overwrite it with the following):
<textarea class="code" id="code-58" style="display: none; ">&lt;h1&gt;This is the profile of &lt;?=$user-&gt;first_name?&gt;&lt;/h1&gt;</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 24.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 25px; "><div class="CodeMirror-gutter-text"><pre>1</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-tag">&lt;h1&gt;</span>This is the profile of <span class="cm-meta">&lt;?</span><span class="cm-operator">=</span><span class="cm-variable-2">$user</span><span class="cm-operator">-&gt;</span><span class="cm-word">first_name</span><span class="cm-meta">?&gt;</span><span class="cm-tag">&lt;/h1&gt;</span></pre></div></div></div></div></div></div></div>

Note how we can user the <span class="variable">$user</span> object in the View without having to pass it in from the controller; this is a result of using <span class="variable">set_global()</span> when we were authenticating in the base.
</div>









<div class="page">
<h2><a name="Logging out"></a>Logging out</h2>
We need one more method for our rudimentary login system - the ability to log out. 
<br><br>

<span class="variable">/p2.yourdomain.com/controllers/c_users.php</span>
<textarea class="code" id="code-59" style="display: none; ">&lt;?
public function logout() {
	
	# Generate and save a new token for next login
	$new_token = sha1(TOKEN_SALT.$this-&gt;user-&gt;email.Utils::generate_random_string());
	
	# Create the data array we'll use with the update method
	# In this case, we're only updating one field, so our array only has one entry
	$data = Array("token" =&gt; $new_token);
	
	# Do the update
	DB::instance(DB_NAME)-&gt;update("users", $data, "WHERE token = '".$this-&gt;user-&gt;token."'");
	
	# Delete their token cookie - effectively logging them out
	setcookie("token", "", strtotime('-1 year'), '/');
	
	# Send them back to the main landing page
	Router::redirect("/");

}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 268px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 268px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">logout</span>() {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Generate and save a new token for next login</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$new_token</span> <span class="cm-operator">=</span> <span class="cm-word">sha1</span>(<span class="cm-word">TOKEN_SALT</span>.<span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span><span class="cm-operator">-&gt;</span><span class="cm-word">email</span>.<span class="cm-word">Utils</span>::<span class="cm-word">generate_random_string</span>());</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Create the data array we'll use with the update method</span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># In this case, we're only updating one field, so our array only has one entry</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$data</span> <span class="cm-operator">=</span> <span class="cm-word">Array</span>(<span class="cm-string">"token"</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">$new_token</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Do the update</span></pre><pre><span class="cm-tab">    </span><span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">update</span>(<span class="cm-string">"users"</span>, <span class="cm-variable-2">$data</span>, <span class="cm-string">"WHERE token = '"</span>.<span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span><span class="cm-operator">-&gt;</span><span class="cm-word">token</span>.<span class="cm-string">"'"</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Delete their token cookie - effectively logging them out</span></pre><pre><span class="cm-tab">    </span><span class="cm-word">setcookie</span>(<span class="cm-string">"token"</span>, <span class="cm-string">""</span>, <span class="cm-word">strtotime</span>(<span class="cm-string">'-1 year'</span>), <span class="cm-string">'/'</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Send them back to the main landing page</span></pre><pre><span class="cm-tab">    </span><span class="cm-word">Router</span>::<span class="cm-word">redirect</span>(<span class="cm-string">"/"</span>);</pre><pre> </pre><pre>}</pre></div></div></div></div></div></div></div>
<br>
In this method, the first thing we do is generate a new token that they will use <em>next time</em> they log in.
<br><br>
Then, we delete their token cookie and show them a confirmation message.
<br><br>
Now that you can log out and test the profile page we created in the last section - make sure both cases (logged in and logged out) work as expected.
</div>






<div class="page">
<h2><a name="Creating the database"></a>Creating the database</h2>
Before you deploy and test all your user functionality you just built, you'll need to set up a live database.
<br><br>

If your server is running cPanel, search for the MySQL Databases page:
<img class="responsive" src="./framework_files/00002942.png">
<br><br>

Then, create a new database:<br>
<img class="responsive" src="./framework_files/00002943.png">
<small>Note: some servers force your database name to be prefixed with your username. If this is the case, you'll have to do this and then change your database name on your local server to match. Don't forget to <a href="http://students.susanbuck.net/framework#Creating the local database">adjust your config</a> to match as well. </small>
<br><br>


Now go back and create a new user (write down / record the username and password, we'll need it again shortly.)<br>
<img src="./framework_files/00002944.png">
<br><br>

Go back again and add the user you just created to the new database:<br>
<img src="./framework_files/00002945.png">
<br><br>

To edit this new database, lets find phpMyAdmin on your live server - it can also be located from cPanel:<br>
<img class="responsive" src="./framework_files/00002946.png">
<br><br>

In phpMyAdmin You should see the database you just created via cPanel:<br>
<img src="./framework_files/00002948.png">
<br><br>

Finally, you need to add your users table to the live database. To do this, you could export your table from your local phpMyAdmin and import it to your live phpMyAdmin, but for now lets do it by hand, just like you did when setting it up on local:<br>
<img class="responsive" src="./framework_files/00002921.png">


</div>


















<div class="page">
<h2><a name="Connecting to the live database"></a>Connecting to the live database</h2>
Just as we edited our local <span class="variable">environment.php</span> file to connect to the local database, we now need to edit the live <span class="variable">environment.php</span> file.
<br><br>
Don't forget, to make any edits to your live <span class="variable">environment.php</span> file, it has to be via a FTP program. Because we don't keep the environment.php file in the Git repo, it can't be edited via the local-&gt;git-&gt;live workflow.
<br><br>
<span class="variable">/public_html/dwa/environment.php</span>:
<textarea class="code" id="code-60" style="display: none; ">&lt;?php
/**** LIVE ****/
define('IN_PRODUCTION', TRUE);
define('DISPLAY_ERRORS', FALSE);
define('ENABLE_OUTGOING_EMAIL', TRUE);

# Always connect to live database
define('DB_HOST', 'localhost');
define('DB_USER', 'foobar');
define('DB_PASS', 'topsecret');</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 140px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 140px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-comment">/**** LIVE ****/</span></pre><pre><span class="cm-word">define</span>(<span class="cm-string">'IN_PRODUCTION'</span>, <span class="cm-atom">TRUE</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'DISPLAY_ERRORS'</span>, <span class="cm-atom">FALSE</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'ENABLE_OUTGOING_EMAIL'</span>, <span class="cm-atom">TRUE</span>);</pre><pre> </pre><pre><span class="cm-comment"># Always connect to live database</span></pre><pre><span class="cm-word">define</span>(<span class="cm-string">'DB_HOST'</span>, <span class="cm-string">'localhost'</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'DB_USER'</span>, <span class="cm-string">'foobar'</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'DB_PASS'</span>, <span class="cm-string">'topsecret'</span>);</pre></div></div></div></div></div></div></div>

<br>
Most often, the DB_HOST should be <span class="variable">localhost</span>, but if that doesn't work, you may have to dig around your host settings or contact your provider to see if it's something different.
<br><br>

<strong>Test it out</strong><br>
Make sure you've deployed your latest changes, then test all the user's features you built:
<br>
<ul>
<li>http://p2.yourdomain.com/users/signup
</li><li>http://p2.yourdomain.com/users/login
</li><li>http://p2.yourdomain.com/users/profile
</li><li>http://p2.yourdomain.com/users/logout
</li></ul>
</div>








<div class="page">
<h2><a name="Database relationships"></a>Database relationships</h2>
As your application grows in complexity, so will the number of tables you need to organize your data.
<br><br>
Some tables will act independently of one another, but more often than not, they need to work together. We describe the different ways tables work with one another in terms of "relationships":

<br><br>
<ul>	
	<li>One to Many relationships
	</li><li>Many to Many relationships
	</li><li>One to One relationship
</li></ul>

The following sections will take you through some examples of these relationships as they relate to our micro-blog.
<br><br>
Before we begin though - some suggestions for supplemental reading. We're going to continue to build on our SQL skills and things are going to get more complex. To help re-inforce the concepts that are to follow, we suggest reading these tutorials:<br>
<br>
<ul>
	<li><a href="http://net.tutsplus.com/tutorials/databases/sql-for-beginners-part-2/" target="_blank">Nettuts+ SQL for Beginners Part 2</a>
	</li><li><a href="http://net.tutsplus.com/tutorials/databases/sql-for-beginners-part-3-database-relationships/" target="_blank">Nettuts+ SQL for Beginners Part 3 Database Relationships</a>
</li></ul>






</div>










<div class="page">
<h2><a name="One to Many: Users to Posts"></a>One to Many: Users to Posts</h2>
The next table we need to create is for <span class="variable">posts</span> which will demonstrate a <strong>One to Many relationship</strong> because for each user there will be many posts.
<br><br>
<img class="responsive" src="./framework_files/00003002.png">
<br><br>
Go ahead and create your posts table, starting with these 5 fields:<br>
<img class="responsive" src="./framework_files/00002992.png">
<br><br>
The <span class="variable">user_id</span> field in this posts table will serve to connect the users table; this is referred to as a <strong>foreign key</strong>.
<br><br>
Lets create a controller with some methods and views to add posts to this new table.
<br><br>

<span class="variable">/p2.yourapp.com/controllers/c_posts.php (new file)</span>
<textarea class="code" id="code-61" style="display: none; ">&lt;?php

class posts_controller extends base_controller {

	public function __construct() {
		parent::__construct();
		
		# Make sure user is logged in if they want to use anything in this controller
		if(!$this-&gt;user) {
			die("Members only. &lt;a href='/users/login'&gt;Login&lt;/a&gt;");
		}
		
	}
	
	public function add() {
	
		# Setup view
		$this-&gt;template-&gt;content = View::instance('v_posts_add');
		$this-&gt;template-&gt;title   = "Add a new post";
			
		# Render template
		echo $this-&gt;template;
	
	}
	
	public function p_add() {
			
		# Associate this post with this user
		$_POST['user_id']  = $this-&gt;user-&gt;user_id;
		
		# Unix timestamp of when this post was created / modified
		$_POST['created']  = Time::now();
		$_POST['modified'] = Time::now();
		
		# Insert
		# Note we didn't have to sanitize any of the $_POST data because we're using the insert method which does it for us
		DB::instance(DB_NAME)-&gt;insert('posts', $_POST);
		
		# Quick and dirty feedback
		echo "Your post has been added. &lt;a href='/posts/add'&gt;Add another?&lt;/a&gt;";
	
	}
}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 575.2px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 576px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre><pre>23</pre><pre>24</pre><pre>25</pre><pre>26</pre><pre>27</pre><pre>28</pre><pre>29</pre><pre>30</pre><pre>31</pre><pre>32</pre><pre>33</pre><pre>34</pre><pre>35</pre><pre>36<br>&nbsp;</pre><pre>37</pre><pre>38</pre><pre>39</pre><pre>40</pre><pre>41</pre><pre>42</pre><pre>43</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre> </pre><pre><span class="cm-keyword">class</span> <span class="cm-word">posts_controller</span> <span class="cm-keyword">extends</span> <span class="cm-word">base_controller</span> {</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">__construct</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">parent</span>::<span class="cm-word">__construct</span>();</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Make sure user is logged in if they want to use anything in this controller</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">if</span>(<span class="cm-operator">!</span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">die</span>(<span class="cm-string">"Members only. &lt;a href='/users/login'&gt;Login&lt;/a&gt;"</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">add</span>() {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Setup view</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'v_posts_add'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">title</span>   <span class="cm-operator">=</span> <span class="cm-string">"Add a new post"</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Render template</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">p_add</span>() {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Associate this post with this user</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$_POST</span>[<span class="cm-string">'user_id'</span>]  <span class="cm-operator">=</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span><span class="cm-operator">-&gt;</span><span class="cm-word">user_id</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Unix timestamp of when this post was created / modified</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$_POST</span>[<span class="cm-string">'created'</span>]  <span class="cm-operator">=</span> <span class="cm-word">Time</span>::<span class="cm-word">now</span>();</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$_POST</span>[<span class="cm-string">'modified'</span>] <span class="cm-operator">=</span> <span class="cm-word">Time</span>::<span class="cm-word">now</span>();</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Insert</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Note we didn't have to sanitize any of the $_POST data because we're using the insert method which does it for us</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">insert</span>(<span class="cm-string">'posts'</span>, <span class="cm-variable-2">$_POST</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment"># Quick and dirty feedback</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-string">"Your post has been added. &lt;a href='/posts/add'&gt;Add another?&lt;/a&gt;"</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>}</pre><pre>}</pre></div></div></div></div></div></div></div>

<br>
<span class="variable">/p2.yourdomain.com/views/v_posts_add.php (new file)</span>
<textarea class="code" id="code-62" style="display: none; ">&lt;form method='POST' action='/posts/p_add'&gt;

	&lt;strong&gt;New Post:&lt;/strong&gt;&lt;br&gt;
	&lt;textarea name='content'&gt;&lt;/textarea&gt;

	&lt;br&gt;&lt;br&gt;
	&lt;input type='submit'&gt;

&lt;/form&gt;</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 127.2px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 128px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-tag">&lt;form</span> <span class="cm-attribute">method</span>=<span class="cm-string">'POST'</span> <span class="cm-attribute">action</span>=<span class="cm-string">'/posts/p_add'</span><span class="cm-tag">&gt;</span></pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;strong&gt;</span>New Post:<span class="cm-tag">&lt;/strong&gt;&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;textarea</span> <span class="cm-attribute">name</span>=<span class="cm-string">'content'</span><span class="cm-tag">&gt;&lt;/textarea&gt;</span></pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'submit'</span><span class="cm-tag">&gt;</span></pre><pre> </pre><pre><span class="cm-tag">&lt;/form&gt;</span></pre></div></div></div></div></div></div></div>
<br><br>
With that built, you should go to http://localhost/posts/add and add a few test posts. <br>
<img src="./framework_files/00003026.png">
<br><br>
Now that we have a posts table, lets now look at how we would construct our SQL to read this data.
<br><br>
First, run this query in phpmyadmin:

<textarea class="code" id="code-63" style="display: none; ">SELECT *
FROM posts</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 37.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 38px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>SELECT *</pre><pre>FROM posts</pre></div></div></div></div></div></div></div>
<img src="./framework_files/00003004.png">
<br><br>

This clearly gives us all the post data, but lets make those results more useful by joining in the user data.

<textarea class="code" id="code-64" style="display: none; ">SELECT *
FROM posts
JOIN users USING (user_id)</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 50.400000000000006px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 51px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>SELECT *</pre><pre>FROM posts</pre><pre>JOIN users USING (user_id)</pre></div></div></div></div></div></div></div>
<a target="_blank" href="./framework_files/00003005.png"><img class="responsive" src="./framework_files/00003005.png"></a><br>
<small><a target="_blank" href="./framework_files/00003005.png">click to enlarge</a></small>

<br><br>
Note how now our result set has information about the post <em>and</em> information about the user who made that post.
<br><br>
Lets use this query in an index method within the posts controller.
<br><br>
<span class="variable">/controllers/c_posts.php</span>
<textarea class="code" id="code-65" style="display: none; ">&lt;?
public function index() {

	# Set up view
	$this-&gt;template-&gt;content = View::instance('v_posts_index');
	$this-&gt;template-&gt;title   = "Posts";
	
	# Build our query
	$q = "SELECT * 
		FROM posts
		JOIN users USING (user_id)";
	
	# Run our query, grabbing all the posts and joining in the users	
	$posts = DB::instance(DB_NAME)-&gt;select_rows($q);
	
	# Pass data to the view
	$this-&gt;template-&gt;content-&gt;posts = $posts;
	
	# Render view
	echo $this-&gt;template;
	
}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 293.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 294px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">index</span>() {</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Set up view</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'v_posts_index'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">title</span>   <span class="cm-operator">=</span> <span class="cm-string">"Posts"</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Build our query</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$q</span> <span class="cm-operator">=</span> <span class="cm-string">"SELECT * </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">FROM posts</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">JOIN users USING (user_id)"</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Run our query, grabbing all the posts and joining in the users<span class="cm-tab">    </span></span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$posts</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">select_rows</span>(<span class="cm-variable-2">$q</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Pass data to the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span><span class="cm-operator">-&gt;</span><span class="cm-word">posts</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$posts</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Render view</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span>;</pre><pre><span class="cm-tab">    </span></pre><pre>}</pre></div></div></div></div></div></div></div>

<br>

<span class="variable">/views/v_posts_index.php</span>
<br>
<textarea class="code" id="code-66" style="display: none; ">&lt;? foreach($posts as $post): ?&gt;
	
	&lt;h2&gt;&lt;?=$post['first_name']?&gt; &lt;?=$post['last_name']?&gt; posted:&lt;/h2&gt;
	&lt;?=$post['content']?&gt;
	
	&lt;br&gt;&lt;br&gt;
	
&lt;? endforeach; ?&gt;</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 114.4px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 115px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span> <span class="cm-keyword">foreach</span>(<span class="cm-variable-2">$posts</span> <span class="cm-keyword">as</span> <span class="cm-variable-2">$post</span>): <span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;h2&gt;</span><span class="cm-meta">&lt;?</span><span class="cm-operator">=</span><span class="cm-variable-2">$post</span>[<span class="cm-string">'first_name'</span>]<span class="cm-meta">?&gt;</span> <span class="cm-meta">&lt;?</span><span class="cm-operator">=</span><span class="cm-variable-2">$post</span>[<span class="cm-string">'last_name'</span>]<span class="cm-meta">?&gt;</span> posted:<span class="cm-tag">&lt;/h2&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span><span class="cm-operator">=</span><span class="cm-variable-2">$post</span>[<span class="cm-string">'content'</span>]<span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-meta">&lt;?</span> <span class="cm-keyword">endforeach</span>; <span class="cm-meta">?&gt;</span></pre></div></div></div></div></div></div></div>
<br><br>
When you run <span class="variable">http://localhost/posts</span> you should see the test posts you created, including the name of who made the post (whoever you're logged in as):
<br>
<img src="./framework_files/00003021.png">

</div>






<div class="page">
<h2><a name="Seeding data"></a>Seeding data</h2>
Before we move forward, it will be helpful to seed some data into your application. You'll want a handful of users and those users will want to have a handful of posts each.
<br><br>
You can create this data manually by following this routine:
<br>

<ol>
<li>Sign up a new user
</li><li>Log in that user
</li><li>Create a handful of sample posts for that user
</li><li>Log out that user
</li><li>Go to step 1
</li></ol>
<br>
Or, as a short-cut, you can copy and run the following very large SQL statement into phpMyAdmin which will create 7 test users for you, some with one post, some with a few posts, some with no posts.
<br><br>
Warning: This is only suggested if you've followed the exact procedures of this documentation so far, because it will whipe our your existing tables and create new ones. If you've gone off course at all (ex: added extra fields) that information will be lost.

<textarea class="code" id="code-67" style="display: none; "># Dump of table posts
# ------------------------------------------------------------

DROP TABLE IF EXISTS `posts`;

CREATE TABLE `posts` (
  `post_id` int(11) NOT NULL AUTO_INCREMENT,
  `created` int(11) NOT NULL,
  `modified` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `content` text NOT NULL,
  PRIMARY KEY (`post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;

INSERT INTO `posts` (`post_id`, `created`, `modified`, `user_id`, `content`)
VALUES
	(1,1337674925,1337674925,6,'Hello World'),
	(2,1337675508,1337675508,6,'This is test #2'),
	(3,1337675531,1337675531,6,'And this is test #3'),
	(5,1337749219,1337749219,10,'I like to kick, stretch, annnnnnnd kick. IIIIIIIIIIIIIIIIII’m 50! Fifty years old'),
	(6,1337749403,1337749403,8,'I\'m 35 years old and I live in a van down by the river!'),
	(7,1337749505,1337749505,8,'Hi. How is everybody? Good. Great.'),
	(8,1337749608,1337749608,9,'You\'reeee welcome!'),
	(9,1337749889,1337749889,11,'You know who\'s excited about Christmas? The credit card companies. '),
	(10,1337749984,1337749984,6,'Hiiiiiiii!! Just kidding, I don\'t say \"Hi\" like that, I say \"Hi\" like this: Hiii! Just kidding, that was a little more normal than I say it. \"Hi!\" That\'s how I say it, that\'s how I say it -- just kidding.'),
	(11,1337750046,1337750046,6,'Actually, there\'s a few ways -- just kidding, there\'s only one way -- just kidding, I don\'t know how many ways there are -- just kidding, I do, there\'s eight -- just kidding, there\'s eighteen, I counted them -- just kidding, my friend did and she never lies -- just kidding, she lied once, but I wasn\'t there -- just kidding, we\'re not really friends, we work together -- just kidding, I work by myself -- just kidding, I work out by myself -- just kidding, I don\'t work out, \'cause I kicked out of my gym -- just kidding, it closed -- just kidding!');

/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table users
# ------------------------------------------------------------

DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `created` int(11) NOT NULL,
  `modified` int(11) NOT NULL,
  `token` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `first_name` varchar(255) NOT NULL,
  `last_name` varchar(255) NOT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;

INSERT INTO `users` (`user_id`, `created`, `modified`, `token`, `password`, `email`, `first_name`, `last_name`)
VALUES
	(6,1337747231,1337747231,'7181bd08dc2c982921ac7c9687d6572b3572f7b9','9a8c2065ef4fcf1d8eddc9b9b5e95d381b555dc7','judy@gmail.com','Judy','Grimes'),
	(7,1337747352,1337747352,'b9a0818fd6f402c3f3fa260edab938635cc5dd71','9b05e866142be0cc955791c72d24a3e099986f9d','anthony@gmail.com','Anthony','Crispino'),
	(8,1337747500,1337747500,'6856899ff529963e89da03356b98264f2a4fe428','5ac9bb69c20bf05a01d3c1627f66972ca0807de5','matt@gmail.com','Matt','Foley'),
	(9,1337747521,1337747521,'ee2f725f2d72075e326ecf7eae1a6c26fbac690d','5ac9bb69c20bf05a01d3c1627f66972ca0807de5','nick@gmail.com','Nick','Burns'),
	(10,1337747562,1337747562,'bd6fe3c206f277727c1a64f9e36393cdb310a15b','5ac9bb69c20bf05a01d3c1627f66972ca0807de5','sally@gmail.com','Sally','O\'Malley'),
	(11,1337747594,1337747594,'392e484387c33bf8dadee259d9862d797068937f','f037178d754639764a61b30764acd9ec637f8dc7','debbie@gmail.com','Debbie','Downer'),
	(12,1337747740,1337747740,'73e8bb849e42d71b66a13011b421eac57310b0c3','c09ee5f1a756f88581282f94ffc1afabd4ed681e','manuel@gmail.com','Manuel','Ortiz');

/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 1189.6000000000001px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 1190px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre><pre>23<br>&nbsp;</pre><pre>24</pre><pre>25</pre><pre>26</pre><pre>27<br>&nbsp;</pre><pre>28<br>&nbsp;<br>&nbsp;</pre><pre>29<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</pre><pre>30</pre><pre>31</pre><pre>32</pre><pre>33</pre><pre>34</pre><pre>35</pre><pre>36</pre><pre>37</pre><pre>38</pre><pre>39</pre><pre>40</pre><pre>41</pre><pre>42</pre><pre>43</pre><pre>44</pre><pre>45</pre><pre>46</pre><pre>47</pre><pre>48</pre><pre>49</pre><pre>50</pre><pre>51</pre><pre>52</pre><pre>53</pre><pre>54</pre><pre>55<br>&nbsp;</pre><pre>56</pre><pre>57<br>&nbsp;<br>&nbsp;</pre><pre>58<br>&nbsp;<br>&nbsp;</pre><pre>59<br>&nbsp;<br>&nbsp;</pre><pre>60<br>&nbsp;<br>&nbsp;</pre><pre>61<br>&nbsp;<br>&nbsp;</pre><pre>62<br>&nbsp;<br>&nbsp;</pre><pre>63<br>&nbsp;<br>&nbsp;</pre><pre>64</pre><pre>65</pre><pre>66</pre><pre>67</pre><pre>68</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre># Dump of table posts</pre><pre># ------------------------------------------------------------</pre><pre> </pre><pre>DROP TABLE IF EXISTS `posts`;</pre><pre> </pre><pre>CREATE TABLE `posts` (</pre><pre>  `post_id` int(11) NOT NULL AUTO_INCREMENT,</pre><pre>  `created` int(11) NOT NULL,</pre><pre>  `modified` int(11) NOT NULL,</pre><pre>  `user_id` int(11) NOT NULL,</pre><pre>  `content` text NOT NULL,</pre><pre>  PRIMARY KEY (`post_id`)</pre><pre>) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;</pre><pre> </pre><pre>LOCK TABLES `posts` WRITE;</pre><pre>/*!40000 ALTER TABLE `posts` DISABLE KEYS */;</pre><pre> </pre><pre>INSERT INTO `posts` (`post_id`, `created`, `modified`, `user_id`, `content`)</pre><pre>VALUES</pre><pre><span class="cm-tab">    </span>(1,1337674925,1337674925,6,'Hello World'),</pre><pre><span class="cm-tab">    </span>(2,1337675508,1337675508,6,'This is test #2'),</pre><pre><span class="cm-tab">    </span>(3,1337675531,1337675531,6,'And this is test #3'),</pre><pre><span class="cm-tab">    </span>(5,1337749219,1337749219,10,'I like to kick, stretch, annnnnnnd kick. IIIIIIIIIIIIIIIIII’m 50! Fifty years old'),</pre><pre><span class="cm-tab">    </span>(6,1337749403,1337749403,8,'I\'m 35 years old and I live in a van down by the river!'),</pre><pre><span class="cm-tab">    </span>(7,1337749505,1337749505,8,'Hi. How is everybody? Good. Great.'),</pre><pre><span class="cm-tab">    </span>(8,1337749608,1337749608,9,'You\'reeee welcome!'),</pre><pre><span class="cm-tab">    </span>(9,1337749889,1337749889,11,'You know who\'s excited about Christmas? The credit card companies. '),</pre><pre><span class="cm-tab">    </span>(10,1337749984,1337749984,6,'Hiiiiiiii!! Just kidding, I don\'t say \"Hi\" like that, I say \"Hi\" like this: Hiii! Just kidding, that was a little more normal than I say it. \"Hi!\" That\'s how I say it, that\'s how I say it -- just kidding.'),</pre><pre><span class="cm-tab">    </span>(11,1337750046,1337750046,6,'Actually, there\'s a few ways -- just kidding, there\'s only one way -- just kidding, I don\'t know how many ways there are -- just kidding, I do, there\'s eight -- just kidding, there\'s eighteen, I counted them -- just kidding, my friend did and she never lies -- just kidding, she lied once, but I wasn\'t there -- just kidding, we\'re not really friends, we work together -- just kidding, I work by myself -- just kidding, I work out by myself -- just kidding, I don\'t work out, \'cause I kicked out of my gym -- just kidding, it closed -- just kidding!');</pre><pre> </pre><pre>/*!40000 ALTER TABLE `posts` ENABLE KEYS */;</pre><pre>UNLOCK TABLES;</pre><pre> </pre><pre> </pre><pre># Dump of table users</pre><pre># ------------------------------------------------------------</pre><pre> </pre><pre>DROP TABLE IF EXISTS `users`;</pre><pre> </pre><pre>CREATE TABLE `users` (</pre><pre>  `user_id` int(11) NOT NULL AUTO_INCREMENT,</pre><pre>  `created` int(11) NOT NULL,</pre><pre>  `modified` int(11) NOT NULL,</pre><pre>  `token` varchar(255) NOT NULL,</pre><pre>  `password` varchar(255) NOT NULL,</pre><pre>  `email` varchar(255) NOT NULL,</pre><pre>  `first_name` varchar(255) NOT NULL,</pre><pre>  `last_name` varchar(255) NOT NULL,</pre><pre>  PRIMARY KEY (`user_id`)</pre><pre>) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;</pre><pre> </pre><pre>LOCK TABLES `users` WRITE;</pre><pre>/*!40000 ALTER TABLE `users` DISABLE KEYS */;</pre><pre> </pre><pre>INSERT INTO `users` (`user_id`, `created`, `modified`, `token`, `password`, `email`, `first_name`, `last_name`)</pre><pre>VALUES</pre><pre><span class="cm-tab">    </span>(6,1337747231,1337747231,'7181bd08dc2c982921ac7c9687d6572b3572f7b9','9a8c2065ef4fcf1d8eddc9b9b5e95d381b555dc7','judy@gmail.com','Judy','Grimes'),</pre><pre><span class="cm-tab">    </span>(7,1337747352,1337747352,'b9a0818fd6f402c3f3fa260edab938635cc5dd71','9b05e866142be0cc955791c72d24a3e099986f9d','anthony@gmail.com','Anthony','Crispino'),</pre><pre><span class="cm-tab">    </span>(8,1337747500,1337747500,'6856899ff529963e89da03356b98264f2a4fe428','5ac9bb69c20bf05a01d3c1627f66972ca0807de5','matt@gmail.com','Matt','Foley'),</pre><pre><span class="cm-tab">    </span>(9,1337747521,1337747521,'ee2f725f2d72075e326ecf7eae1a6c26fbac690d','5ac9bb69c20bf05a01d3c1627f66972ca0807de5','nick@gmail.com','Nick','Burns'),</pre><pre><span class="cm-tab">    </span>(10,1337747562,1337747562,'bd6fe3c206f277727c1a64f9e36393cdb310a15b','5ac9bb69c20bf05a01d3c1627f66972ca0807de5','sally@gmail.com','Sally','O\'Malley'),</pre><pre><span class="cm-tab">    </span>(11,1337747594,1337747594,'392e484387c33bf8dadee259d9862d797068937f','f037178d754639764a61b30764acd9ec637f8dc7','debbie@gmail.com','Debbie','Downer'),</pre><pre><span class="cm-tab">    </span>(12,1337747740,1337747740,'73e8bb849e42d71b66a13011b421eac57310b0c3','c09ee5f1a756f88581282f94ffc1afabd4ed681e','manuel@gmail.com','Manuel','Ortiz');</pre><pre> </pre><pre>/*!40000 ALTER TABLE `users` ENABLE KEYS */;</pre><pre>UNLOCK TABLES;</pre><pre> </pre><pre> </pre></div></div></div></div></div></div></div>

Note: For each of these users the password is their first name. For example, Judy's password is "judy". This will make it easy for you if you need to log in and act as any of the users when testing.


</div>





<div class="page">
<h2><a name="Many to Many: Users to Users"></a>Many to Many: Users to Users</h2>
The next database relationship, Many to Many, will help us build our "follow feature". The idea here is that users should only see posts from other users that they're following. 
<br><br>
In order to manage this, we'll need to create a third table which we'll call <span class="variable">users_users</span>. This will be a <strong>join table</strong> because it will keep track of the relationships between users. 
<br><br>
When naming your join tables, you take the name of the two tables you're joining and separate them with an underscore. You can read the underscore as "to"... so "users_users" reads as "users to users".
<br><br>
What we're creating is technically a <strong>self-referential</strong> many-to-many relationship because we're connecting users to users. An example of another, non-self-referential many-to-many situation is if you had an online store with numerous <span class="variable">orders</span> that connected to numerous <span class="variable">products</span>; with that you'd have a join table called <span class="variable">orders_products</span> or "orders to products".
<br><br>
<img class="responsive" src="./framework_files/00003003.png">
<br>
<br>
Lets create our join table:
<br>
<img class="responsive" src="./framework_files/00003012.png">

Notes:
<ol>
	<li>We're still following the plural to singular naming convention for our first field, making both sides of the _ singular
	</li><li><span class="variable">user_id</span> represents the logged in user who is initiating the relationship
	</li><li><span class="variable">user_id_followed</span> is the user that is being followed
	</li><li>We didnt add a modified field since for this case, no data will be modified - it will just be deleted if the connection is undone
</li></ol>


Now lets create an interface we can use to establish who we're following; we need a page that shows a list of all users with the option to follow or unfollow each user:
<br>
<img src="./framework_files/00003017.png">
<br><br>

It becomes a little fuzzy whether this functionality should be built in the <span class="variable">users</span> controller or the <span class="variable">posts</span> controller. On one hand, it's displaying a list of users, but on the other it's providing a setting related to which posts are seen.
<br><br>
Given we'd like to keep the users controller specific to managing users (log in, sign up, profile, etc.), lets put it in the posts controller.

<br><br>
<span class="variable">/controllers/c_posts.php</span>
<textarea class="code" id="code-68" style="display: none; ">&lt;?php
public function users() {

	# Set up the view
	$this-&gt;template-&gt;content = View::instance("v_posts_users");
	$this-&gt;template-&gt;title   = "Users";
	
	# Build our query to get all the users
	$q = "SELECT *
		FROM users";
		
	# Execute the query to get all the users. Store the result array in the variable $users
	$users = DB::instance(DB_NAME)-&gt;select_rows($q);
	
	# Build our query to figure out what connections does this user already have? I.e. who are they following
	$q = "SELECT * 
		FROM users_users
		WHERE user_id = ".$this-&gt;user-&gt;user_id;
		
	# Execute this query with the select_array method
	# select_array will return our results in an array and use the "users_id_followed" field as the index.
	# This will come in handy when we get to the view
	# Store our results (an array) in the variable $connections
	$connections = DB::instance(DB_NAME)-&gt;select_array($q, 'user_id_followed');
			
	# Pass data (users and connections) to the view
	$this-&gt;template-&gt;content-&gt;users       = $users;
	$this-&gt;template-&gt;content-&gt;connections = $connections;

	# Render the view
	echo $this-&gt;template;
}
</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 460px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 460px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15<br>&nbsp;</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21<br>&nbsp;</pre><pre>22</pre><pre>23</pre><pre>24</pre><pre>25</pre><pre>26</pre><pre>27</pre><pre>28</pre><pre>29</pre><pre>30</pre><pre>31</pre><pre>32</pre><pre>33</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">users</span>() {</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Set up the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">"v_posts_users"</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">title</span>   <span class="cm-operator">=</span> <span class="cm-string">"Users"</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Build our query to get all the users</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$q</span> <span class="cm-operator">=</span> <span class="cm-string">"SELECT *</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">FROM users"</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Execute the query to get all the users. Store the result array in the variable $users</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$users</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">select_rows</span>(<span class="cm-variable-2">$q</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Build our query to figure out what connections does this user already have? I.e. who are they following</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$q</span> <span class="cm-operator">=</span> <span class="cm-string">"SELECT * </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">FROM users_users</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">WHERE user_id = "</span>.<span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span><span class="cm-operator">-&gt;</span><span class="cm-word">user_id</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Execute this query with the select_array method</span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># select_array will return our results in an array and use the "users_id_followed" field as the index.</span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># This will come in handy when we get to the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Store our results (an array) in the variable $connections</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$connections</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">select_array</span>(<span class="cm-variable-2">$q</span>, <span class="cm-string">'user_id_followed'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Pass data (users and connections) to the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span><span class="cm-operator">-&gt;</span><span class="cm-word">users</span>       <span class="cm-operator">=</span> <span class="cm-variable-2">$users</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span><span class="cm-operator">-&gt;</span><span class="cm-word">connections</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$connections</span>;</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Render the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span>;</pre><pre>}</pre><pre> </pre></div></div></div></div></div></div></div>

<br>

<span class="variable">/views/v_posts_users.php</span>
<textarea class="code" id="code-69" style="display: none; ">&lt;form method='POST' action='/posts/p_follow'&gt;
		
	&lt;? foreach($users as $user): ?&gt;
	
		&lt;!-- Print this user's name --&gt;
		&lt;?=$user['first_name']?&gt; &lt;?=$user['last_name']?&gt;
		
		&lt;!-- If there exists a connection with this user, show a unfollow link --&gt;
		&lt;? if(isset($connections[$user['user_id']])): ?&gt;
			&lt;a href='/posts/unfollow/&lt;?=$user['user_id']?&gt;'&gt;Unfollow&lt;/a&gt;
		
		&lt;!-- Otherwise, show the follow link --&gt;
		&lt;? else: ?&gt;
			&lt;a href='/posts/follow/&lt;?=$user['user_id']?&gt;'&gt;Follow&lt;/a&gt;
		&lt;? endif; ?&gt;
	
		&lt;br&gt;&lt;br&gt;
	
	&lt;? endforeach; ?&gt;
	
&lt;/form&gt;</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 280.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 281px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-tag">&lt;form</span> <span class="cm-attribute">method</span>=<span class="cm-string">'POST'</span> <span class="cm-attribute">action</span>=<span class="cm-string">'/posts/p_follow'</span><span class="cm-tag">&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span> <span class="cm-keyword">foreach</span>(<span class="cm-variable-2">$users</span> <span class="cm-keyword">as</span> <span class="cm-variable-2">$user</span>): <span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment">&lt;!-- Print this user's name --&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span><span class="cm-operator">=</span><span class="cm-variable-2">$user</span>[<span class="cm-string">'first_name'</span>]<span class="cm-meta">?&gt;</span> <span class="cm-meta">&lt;?</span><span class="cm-operator">=</span><span class="cm-variable-2">$user</span>[<span class="cm-string">'last_name'</span>]<span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment">&lt;!-- If there exists a connection with this user, show a unfollow link --&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span> <span class="cm-keyword">if</span>(<span class="cm-keyword">isset</span>(<span class="cm-variable-2">$connections</span>[<span class="cm-variable-2">$user</span>[<span class="cm-string">'user_id'</span>]])): <span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tag">&lt;a</span> <span class="cm-attribute">href</span>=<span class="cm-string">'/posts/unfollow/</span><span class="cm-meta">&lt;?</span><span class="cm-operator">=</span><span class="cm-variable-2">$user</span>[<span class="cm-string">'user_id'</span>]<span class="cm-meta">?&gt;</span><span class="cm-string">'&gt;Unfollow&lt;/a&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">&lt;!-- Otherwise, show the follow link --&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span> <span class="cm-keyword">else</span>: <span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">&lt;a href='</span><span class="cm-attribute">/posts</span><span class="cm-error">/follow</span><span class="cm-attribute">/</span><span class="cm-meta">&lt;?</span><span class="cm-operator">=</span><span class="cm-variable-2">$user</span>[<span class="cm-string">'user_id'</span>]<span class="cm-meta">?&gt;</span><span class="cm-error">'&gt;Follow&lt;/a&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span> <span class="cm-keyword">endif</span>; <span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-error">&lt;br&gt;&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span> <span class="cm-keyword">endforeach</span>; <span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-error">&lt;/form&gt;</span></pre></div></div></div></div></div></div></div>
<br><br>

When you hit <span class="variable">http://localhost/posts/users</span> you should see something like the following:<br>
<img src="./framework_files/00003017.png">

<br><br>

Now lets create the two methods that will add and delete the entries from the <span class="variable">users_users</span> table. We'll call them <span class="variable">follow</span> and <span class="variable">unfollow</span>, and if you look closely at the View above, you can see where we call upon them from the Follow and Unfollow links. Both methods accept one parameter, <span class="variable">$user_id_followed</span>.
<br><br>
<span class="variable">/controllers/c_posts.php</span>
<textarea class="code" id="code-70" style="display: none; ">&lt;?php
public function follow($user_id_followed) {
		
	# Prepare our data array to be inserted
	$data = Array(
		"created" =&gt; Time::now(),
		"user_id" =&gt; $this-&gt;user-&gt;user_id,
		"user_id_followed" =&gt; $user_id_followed
		);
	
	# Do the insert
	DB::instance(DB_NAME)-&gt;insert('users_users', $data);

	# Send them back
	Router::redirect("/posts/users");

}

public function unfollow($user_id_followed) {

	# Delete this connection
	$where_condition = 'WHERE user_id = '.$this-&gt;user-&gt;user_id.' AND user_id_followed = '.$user_id_followed;
	DB::instance(DB_NAME)-&gt;delete('users_users', $where_condition);
	
	# Send them back
	Router::redirect("/posts/users");

}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 383.20000000000005px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 384px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22<br>&nbsp;</pre><pre>23</pre><pre>24</pre><pre>25</pre><pre>26</pre><pre>27</pre><pre>28</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">follow</span>(<span class="cm-variable-2">$user_id_followed</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Prepare our data array to be inserted</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$data</span> <span class="cm-operator">=</span> <span class="cm-word">Array</span>(</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"created"</span> <span class="cm-operator">=&gt;</span> <span class="cm-word">Time</span>::<span class="cm-word">now</span>(),</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"user_id"</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span><span class="cm-operator">-&gt;</span><span class="cm-word">user_id</span>,</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"user_id_followed"</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">$user_id_followed</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Do the insert</span></pre><pre><span class="cm-tab">    </span><span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">insert</span>(<span class="cm-string">'users_users'</span>, <span class="cm-variable-2">$data</span>);</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Send them back</span></pre><pre><span class="cm-tab">    </span><span class="cm-word">Router</span>::<span class="cm-word">redirect</span>(<span class="cm-string">"/posts/users"</span>);</pre><pre> </pre><pre>}</pre><pre> </pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">unfollow</span>(<span class="cm-variable-2">$user_id_followed</span>) {</pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Delete this connection</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$where_condition</span> <span class="cm-operator">=</span> <span class="cm-string">'WHERE user_id = '</span>.<span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span><span class="cm-operator">-&gt;</span><span class="cm-word">user_id</span>.<span class="cm-string">' AND user_id_followed = '</span>.<span class="cm-variable-2">$user_id_followed</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">delete</span>(<span class="cm-string">'users_users'</span>, <span class="cm-variable-2">$where_condition</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Send them back</span></pre><pre><span class="cm-tab">    </span><span class="cm-word">Router</span>::<span class="cm-word">redirect</span>(<span class="cm-string">"/posts/users"</span>);</pre><pre> </pre><pre>}</pre></div></div></div></div></div></div></div>

<br>
Test your work so far. You should see the follow/unfollow links toggle as you click on them, and your users_users table should reflect the changes:
<br><br>
<img class="responsive" src="./framework_files/00003019.png">

</div>













<div class="page">
<h2><a name="Post stream"></a>Post stream</h2>
Now that we can create connections for users, lets create a page that lets you view just the posts of the users you are following.
<br><br>
To do this, lets revisit the <span class="variable">index</span> method we created in the posts controller which used this simple query:

<textarea class="code" id="code-71" style="display: none; ">SELECT * 
FROM posts
JOIN users USING (user_id)</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 50.400000000000006px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 51px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>SELECT * </pre><pre>FROM posts</pre><pre>JOIN users USING (user_id)</pre></div></div></div></div></div></div></div>
<br>
We need to adapt this query now to only grab posts from users we're following. To do this, we'll implement the <a href="http://w3schools.com/sql/sql_in.asp" target="_blank">WHERE IN clause</a>.
<br><br>
We'll be aiming for a query that looks like this:

<textarea class="code" id="code-72" style="display: none; ">SELECT * 
FROM posts
JOIN users USING (user_id)
WHERE posts.user_id IN (10,7,8)</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 63.2px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 64px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>SELECT * </pre><pre>FROM posts</pre><pre>JOIN users USING (user_id)</pre><pre>WHERE posts.user_id IN (10,7,8)</pre></div></div></div></div></div></div></div>
The numbers 10,7,8 are just an example, but they represent the user_ids of the users we're following.
<br><br>
Note how in the <span class="variable">WHERE</span> clause we said <span class="variable">WHERE posts.user_id</span> instead of just <span class="variable">WHERE users_id</span>. We did this because both the users table and the posts table have a field <span class="variable">user_id</span> so it's ambiguous which one we were referring to. Appending the table name before the field name specifies which table we're talking about.
<br><br>

So that's what the query looks like. The new challenge here is how we create that string of user_ids (10,7,8). 
<br><br>
<span class="variable">/controllers/c_posts.php:</span>
<textarea class="code" id="code-73" style="display: none; ">&lt;?
public function index() {
	
	# Set up view
	$this-&gt;template-&gt;content = View::instance('v_posts_index');
	$this-&gt;template-&gt;title   = "Posts";
	
	# Build a query of the users this user is following - we're only interested in their posts
	$q = "SELECT * 
		FROM users_users
		WHERE user_id = ".$this-&gt;user-&gt;user_id;
	
	# Execute our query, storing the results in a variable $connections
	$connections = DB::instance(DB_NAME)-&gt;select_rows($q);
	
	# In order to query for the posts we need, we're going to need a string of user id's, separated by commas
	# To create this, loop through our connections array
	$connections_string = "";
	foreach($connections as $connection) {
		$connections_string .= $connection['user_id_followed'].",";
	}
	
	# Remove the final comma 
	$connections_string = substr($connections_string, 0, -1);
	
	# Connections string example: 10,7,8 (where the numbers are the user_ids of who this user is following)

	# Now, lets build our query to grab the posts
	$q = "SELECT * 
		FROM posts 
		JOIN users USING (user_id)
		WHERE posts.user_id IN (".$connections_string.")"; # This is where we use that string of user_ids we created
				
	# Run our query, store the results in the variable $posts
	$posts = DB::instance(DB_NAME)-&gt;select_rows($q);
	
	# Pass data to the view
	$this-&gt;template-&gt;content-&gt;posts = $posts;
	
	# Render view
	echo $this-&gt;template;
	
}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 600.8000000000001px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 601px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16<br>&nbsp;</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre><pre>23</pre><pre>24</pre><pre>25</pre><pre>26<br>&nbsp;</pre><pre>27</pre><pre>28</pre><pre>29</pre><pre>30</pre><pre>31</pre><pre>32<br>&nbsp;</pre><pre>33</pre><pre>34</pre><pre>35</pre><pre>36</pre><pre>37</pre><pre>38</pre><pre>39</pre><pre>40</pre><pre>41</pre><pre>42</pre><pre>43</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">index</span>() {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Set up view</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">'v_posts_index'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">title</span>   <span class="cm-operator">=</span> <span class="cm-string">"Posts"</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Build a query of the users this user is following - we're only interested in their posts</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$q</span> <span class="cm-operator">=</span> <span class="cm-string">"SELECT * </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">FROM users_users</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">WHERE user_id = "</span>.<span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">user</span><span class="cm-operator">-&gt;</span><span class="cm-word">user_id</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Execute our query, storing the results in a variable $connections</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$connections</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">select_rows</span>(<span class="cm-variable-2">$q</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># In order to query for the posts we need, we're going to need a string of user id's, separated by commas</span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># To create this, loop through our connections array</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$connections_string</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>;</pre><pre><span class="cm-tab">    </span><span class="cm-keyword">foreach</span>(<span class="cm-variable-2">$connections</span> <span class="cm-keyword">as</span> <span class="cm-variable-2">$connection</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable-2">$connections_string</span> .<span class="cm-operator">=</span> <span class="cm-variable-2">$connection</span>[<span class="cm-string">'user_id_followed'</span>].<span class="cm-string">","</span>;</pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Remove the final comma </span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$connections_string</span> <span class="cm-operator">=</span> <span class="cm-word">substr</span>(<span class="cm-variable-2">$connections_string</span>, <span class="cm-number">0</span>, <span class="cm-operator">-</span><span class="cm-number">1</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Connections string example: 10,7,8 (where the numbers are the user_ids of who this user is following)</span></pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Now, lets build our query to grab the posts</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$q</span> <span class="cm-operator">=</span> <span class="cm-string">"SELECT * </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">FROM posts </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">JOIN users USING (user_id)</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">WHERE posts.user_id IN ("</span>.<span class="cm-variable-2">$connections_string</span>.<span class="cm-string">")"</span>; <span class="cm-comment"># This is where we use that string of user_ids we created</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Run our query, store the results in the variable $posts</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$posts</span> <span class="cm-operator">=</span> <span class="cm-word">DB</span>::<span class="cm-word">instance</span>(<span class="cm-word">DB_NAME</span>)<span class="cm-operator">-&gt;</span><span class="cm-word">select_rows</span>(<span class="cm-variable-2">$q</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Pass data to the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span><span class="cm-operator">-&gt;</span><span class="cm-word">posts</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$posts</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Render view</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span>;</pre><pre><span class="cm-tab">    </span></pre><pre>}</pre></div></div></div></div></div></div></div>
<br><br>
Depending on who you're following, you should see a variety of different posts in your resulting stream. Take the time to change who you're following, then view the stream again to see how it changes.
<br>
<img src="./framework_files/00003023.png">


</div>





<div class="page">
<h2><a name="Gathering all the pieces"></a>Gathering all the pieces</h2>

We have a lot of different pages now built so lets organize them together into a simple menu. Because we want the menu displayed on all the pages, we're going to put it directly in the master template.
<br><br>
<span class="variable">/views/_v_template.php</span> (shown here is just the &lt;body&gt; of the template)
<textarea class="code" id="code-74" style="display: none; ">&lt;body&gt;	

	&lt;div id='menu'&gt;
	
		&lt;!-- Menu for users who are logged in --&gt;
		&lt;? if($user): ?&gt;
			
			&lt;a href='/users/logout'&gt;Logout&lt;/a&gt;
			&lt;a href='/posts/users/'&gt;Change who you're following&lt;/a&gt;
			&lt;a href='/posts/'&gt;View posts&lt;/a&gt;
			&lt;a href='/posts/add'&gt;Add a new post&lt;/a&gt;
		
		&lt;!-- Menu options for users who are not logged in --&gt;	
		&lt;? else: ?&gt;
		
			&lt;a href='/users/signup'&gt;Sign up&lt;/a&gt;
			&lt;a href='/users/login'&gt;Log in&lt;/a&gt;
		
		&lt;? endif; ?&gt;
	
	&lt;/div&gt;
	
	&lt;br&gt;

	&lt;?=$content;?&gt; 

&lt;/body&gt;</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 357.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 358px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre><pre>23</pre><pre>24</pre><pre>25</pre><pre>26</pre><pre>27</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-tag">&lt;body&gt;</span><span class="cm-tab">  </span></pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;div</span> <span class="cm-attribute">id</span>=<span class="cm-string">'menu'</span><span class="cm-tag">&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment">&lt;!-- Menu for users who are logged in --&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span> <span class="cm-keyword">if</span>(<span class="cm-variable-2">$user</span>): <span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tag">&lt;a</span> <span class="cm-attribute">href</span>=<span class="cm-string">'/users/logout'</span><span class="cm-tag">&gt;</span>Logout<span class="cm-tag">&lt;/a&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tag">&lt;a</span> <span class="cm-attribute">href</span>=<span class="cm-string">'/posts/users/'</span><span class="cm-tag">&gt;</span>Change who you're following<span class="cm-tag">&lt;/a&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tag">&lt;a</span> <span class="cm-attribute">href</span>=<span class="cm-string">'/posts/'</span><span class="cm-tag">&gt;</span>View posts<span class="cm-tag">&lt;/a&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tag">&lt;a</span> <span class="cm-attribute">href</span>=<span class="cm-string">'/posts/add'</span><span class="cm-tag">&gt;</span>Add a new post<span class="cm-tag">&lt;/a&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-comment">&lt;!-- Menu options for users who are not logged in --&gt;</span><span class="cm-tab">   </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span> <span class="cm-keyword">else</span>: <span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tag">&lt;a</span> <span class="cm-attribute">href</span>=<span class="cm-string">'/users/signup'</span><span class="cm-tag">&gt;</span>Sign up<span class="cm-tag">&lt;/a&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tag">&lt;a</span> <span class="cm-attribute">href</span>=<span class="cm-string">'/users/login'</span><span class="cm-tag">&gt;</span>Log in<span class="cm-tag">&lt;/a&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span> <span class="cm-keyword">endif</span>; <span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;/div&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;</span></pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span><span class="cm-operator">=</span><span class="cm-variable-2">$content</span>;<span class="cm-meta">?&gt;</span> </pre><pre> </pre><pre><span class="cm-tag">&lt;/body&gt;</span></pre></div></div></div></div></div></div></div>

Note how we're displaying different options based on whether a user is logged in or not.

<img class="responsive" src="./framework_files/00003030.png">

</div>








<div class="page">
<h2><a name="Error checking / reporting"></a>Error checking / reporting</h2>
When we talk about error checking and reporting, we're referring to assessing the information users provide, making sure it's valid and giving them feedback if it's not. 
<br><br>
Ideally, most error checking starts on the client side via JavaScript - this way problems can be identified and fixed without the time it takes to make a "round trip" to the server. Note though, that hack-savy users can manipulate our applications via JavaScript, so sensitive data should always be doubly validated on the server side. 
<br><br>
Because we're not focussing on JavaScript in this doc, lets look at error reporting on the server side. (If you're looking to get a start on JavaScript checking and reporting, we suggest the <a target="_blank" href="http://www.position-relative.net/creation/formValidator/">jQuery Validation Engine</a>).
<br><br>
Lets jump back to our login functionality and look at how we can improve things there; as it stands now, if a user enters an invalid username / password combination it just dumps them back to the login page without any indication that something went wrong. This is a great way to frustrate the heck out of a user.
<br><br>

Here's how we last left the login method in <span class="variable">c_users.php</span>:
<textarea class="code" id="code-75" style="display: none; ">&lt;?php
public function p_login() {
	
	# [...irrelevant code redacted...]
			
	# Login failed
	if($token == "") {
		Router::redirect("/users/login");
	}
	# Login passwed
	else {
		setcookie("token", $token, strtotime('+2 weeks'), '/');
		Router::redirect("/");
	}

}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 216.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 217px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">p_login</span>() {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># [...irrelevant code redacted...]</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Login failed</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">if</span>(<span class="cm-variable-2">$token</span> <span class="cm-operator">==</span> <span class="cm-string">""</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">Router</span>::<span class="cm-word">redirect</span>(<span class="cm-string">"/users/login"</span>);</pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Login passwed</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">else</span> {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">setcookie</span>(<span class="cm-string">"token"</span>, <span class="cm-variable-2">$token</span>, <span class="cm-word">strtotime</span>(<span class="cm-string">'+2 weeks'</span>), <span class="cm-string">'/'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">Router</span>::<span class="cm-word">redirect</span>(<span class="cm-string">"/"</span>);</pre><pre><span class="cm-tab">    </span>}</pre><pre> </pre><pre>}</pre></div></div></div></div></div></div></div>
<br>
We want to alter this, so that when we send the user back to the login page, we're sending some indicator there was a problem so that we can display an error.
<br><br>
We can do this via a parameter we tack on to /users/login (line 8):

<textarea class="code" id="code-76" style="display: none; ">&lt;?php
public function p_login() {
	
	# [...irrelevant code redacted...]
			
	# Login failed
	if($token == "") {
		Router::redirect("/users/login/error"); # Note the addition of the parameter "error"
	}
	# Login passwed
	else {
		setcookie("token", $token, strtotime('+2 weeks'), '/');
		Router::redirect("/");
	}

}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 216.8px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 217px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">p_login</span>() {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># [...irrelevant code redacted...]</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Login failed</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">if</span>(<span class="cm-variable-2">$token</span> <span class="cm-operator">==</span> <span class="cm-string">""</span>) {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">Router</span>::<span class="cm-word">redirect</span>(<span class="cm-string">"/users/login/error"</span>); <span class="cm-comment"># Note the addition of the parameter "error"</span></pre><pre><span class="cm-tab">    </span>}</pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Login passwed</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">else</span> {</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">setcookie</span>(<span class="cm-string">"token"</span>, <span class="cm-variable-2">$token</span>, <span class="cm-word">strtotime</span>(<span class="cm-string">'+2 weeks'</span>), <span class="cm-string">'/'</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-word">Router</span>::<span class="cm-word">redirect</span>(<span class="cm-string">"/"</span>);</pre><pre><span class="cm-tab">    </span>}</pre><pre> </pre><pre>}</pre></div></div></div></div></div></div></div>
<br>
Now lets edit the login controller to accept that parameter (line 1) and pass it to the view (line 8):
<textarea class="code" id="code-77" style="display: none; ">&lt;?php
public function login($error = NULL) {
	
	# Set up the view
	$this-&gt;template-&gt;content = View::instance("v_users_login");
	
	# Pass data to the view
	$this-&gt;template-&gt;content-&gt;error = $error;
	
	# Render the view
	echo $this-&gt;template;
	
}</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 178.4px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 179px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-keyword">public</span> <span class="cm-keyword">function</span> <span class="cm-word">login</span>(<span class="cm-variable-2">$error</span> <span class="cm-operator">=</span> <span class="cm-atom">NULL</span>) {</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Set up the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span> <span class="cm-operator">=</span> <span class="cm-word">View</span>::<span class="cm-word">instance</span>(<span class="cm-string">"v_users_login"</span>);</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Pass data to the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span><span class="cm-operator">-&gt;</span><span class="cm-word">content</span><span class="cm-operator">-&gt;</span><span class="cm-word">error</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$error</span>;</pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-comment"># Render the view</span></pre><pre><span class="cm-tab">    </span><span class="cm-keyword">echo</span> <span class="cm-variable-2">$this</span><span class="cm-operator">-&gt;</span><span class="cm-word">template</span>;</pre><pre><span class="cm-tab">    </span></pre><pre>}</pre></div></div></div></div></div></div></div>
<br>
Finally, look for the error in the view and display a message if it exists:
<textarea class="code" id="code-78" style="display: none; ">&lt;form method='POST' action='/users/p_login'&gt;

	Email&lt;br&gt;
	&lt;input type='text' name='email'&gt;	
	&lt;br&gt;&lt;br&gt;
	
	Password&lt;br&gt;
	&lt;input type='password' name='password'&gt;
	&lt;br&gt;&lt;br&gt;
	
	&lt;? if($error): ?&gt;
		&lt;div class='error'&gt;
			Login failed. Please double check your email and password.
		&lt;/div&gt;
		&lt;br&gt;
	&lt;? endif; ?&gt;

	&lt;input type='submit'&gt;

&lt;/form&gt;</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 268px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 268px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-tag">&lt;form</span> <span class="cm-attribute">method</span>=<span class="cm-string">'POST'</span> <span class="cm-attribute">action</span>=<span class="cm-string">'/users/p_login'</span><span class="cm-tag">&gt;</span></pre><pre> </pre><pre><span class="cm-tab">    </span>Email<span class="cm-tag">&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'text'</span> <span class="cm-attribute">name</span>=<span class="cm-string">'email'</span><span class="cm-tag">&gt;</span><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span>Password<span class="cm-tag">&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'password'</span> <span class="cm-attribute">name</span>=<span class="cm-string">'password'</span><span class="cm-tag">&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span></pre><pre><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span> <span class="cm-keyword">if</span>(<span class="cm-variable-2">$error</span>): <span class="cm-meta">?&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tag">&lt;div</span> <span class="cm-attribute">class</span>=<span class="cm-string">'error'</span><span class="cm-tag">&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span>Login failed. Please double check your email and password.</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tag">&lt;/div&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tag">&lt;br&gt;</span></pre><pre><span class="cm-tab">    </span><span class="cm-meta">&lt;?</span> <span class="cm-keyword">endif</span>; <span class="cm-meta">?&gt;</span></pre><pre> </pre><pre><span class="cm-tab">    </span><span class="cm-tag">&lt;input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'submit'</span><span class="cm-tag">&gt;</span></pre><pre> </pre><pre><span class="cm-tag">&lt;/form&gt;</span></pre></div></div></div></div></div></div></div>
<br>
Results:<br>
<img src="./framework_files/00003057.png">

</div>












<div class="page">
<h2><a name="Debugging"></a>Debugging</h2>
PHP has a handful of built in functions for dumping data onto your screen when you're writing and debugging code such as <span class="variable">print_r()</span> and <span class="variable">var_dump()</span>.
<br><br>
We use these functions when we need to see what data we're working with. For example, say we just received this <span class="variable">$_POST</span> array from a form that had multi-dimensions and we want to dissect the contents.
<br>
<textarea class="code" id="code-79" style="display: none; ">&lt;?php
$_POST = Array(
		"user_1" =&gt; Array(
			"first_name" =&gt; "Judy",
			"last_name"  =&gt; "Grimes",
			"email" 	 =&gt; "judy@gmail.com"
			),
		"user_2" =&gt; Array(
			"first_name" =&gt; "Nick",
			"last_name"  =&gt; "Burns",
			"email" 	 =&gt; "nick@gmail.com"
			),
		"user_1" =&gt; Array(
			"first_name" =&gt; "Matt",
			"last_name"  =&gt; "Foley",
			"email" 	 =&gt; "matt@gmail.com"
			)
		);</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 242.4px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 243px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15</pre><pre>16</pre><pre>17</pre><pre>18</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-variable-2">$_POST</span> <span class="cm-operator">=</span> <span class="cm-word">Array</span>(</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"user_1"</span> <span class="cm-operator">=&gt;</span> <span class="cm-word">Array</span>(</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"first_name"</span> <span class="cm-operator">=&gt;</span> <span class="cm-string">"Judy"</span>,</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"last_name"</span>  <span class="cm-operator">=&gt;</span> <span class="cm-string">"Grimes"</span>,</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"email"</span> <span class="cm-tab">    </span> <span class="cm-operator">=&gt;</span> <span class="cm-string">"judy@gmail.com"</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span>),</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"user_2"</span> <span class="cm-operator">=&gt;</span> <span class="cm-word">Array</span>(</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"first_name"</span> <span class="cm-operator">=&gt;</span> <span class="cm-string">"Nick"</span>,</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"last_name"</span>  <span class="cm-operator">=&gt;</span> <span class="cm-string">"Burns"</span>,</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"email"</span> <span class="cm-tab">    </span> <span class="cm-operator">=&gt;</span> <span class="cm-string">"nick@gmail.com"</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span>),</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"user_1"</span> <span class="cm-operator">=&gt;</span> <span class="cm-word">Array</span>(</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"first_name"</span> <span class="cm-operator">=&gt;</span> <span class="cm-string">"Matt"</span>,</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"last_name"</span>  <span class="cm-operator">=&gt;</span> <span class="cm-string">"Foley"</span>,</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-string">"email"</span> <span class="cm-tab">    </span> <span class="cm-operator">=&gt;</span> <span class="cm-string">"matt@gmail.com"</span></pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span>)</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span>);</pre></div></div></div></div></div></div></div>

To do that, we could echo it to the page via <span class="variable">print_r()</span>:
<textarea class="code" id="code-80" style="display: none; ">&lt;?php
print_r($_POST);</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 37.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 38px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-word">print_r</span>(<span class="cm-variable-2">$_POST</span>);</pre></div></div></div></div></div></div></div>	
<br>
The results give us the info we need, but it's messy; it's only slightly more legible via "View Source":
<br>
<img src="./framework_files/00003048.png"><br>

Trying to deciper the contents of strings, arrays and objects is something you're going to do <em>a lot</em>. Given this, the framework provides a better way via the Debug library and a method called "dump" which utilizes a pretty-printing class called <a target="_blank" href="http://krumo.kaloyan.info/">Krumo</a>.

<textarea class="code" id="code-81" style="display: none; ">&lt;?php
echo Debug::dump($_POST,"Contents of POST");</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 37.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 38px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-keyword">echo</span> <span class="cm-word">Debug</span>::<span class="cm-word">dump</span>(<span class="cm-variable-2">$_POST</span>,<span class="cm-string">"Contents of POST"</span>);</pre></div></div></div></div></div></div></div>
<br>
The results are easier to read, and each layer of the array can be expanded or collapsed by clicking:
<img src="./framework_files/00003050.png">
<br><br>
If your code editor supports code snippets / macros, we suggest making one just for this one debug line because you'll use it a lot.
<br><br>

Note that <span class="variable">Debug::dump</span> will not display anything if the server is in production mode (i.e. <span class="variable">IN_PRODUCTION</span> is set to true in your <span class="variable">environment.php</span>). This prevents debugging messages from showing up on your live server if you forget to delete them from your code.
<br><br>

For more details, explore <span class="variable">/core/libraries/Debug.php</span>

</div>









<div class="page">
<h2><a name="Logging"></a>Logging</h2>
Logging is the process of writing to a text file to record some action or data from your server.
<br><br>
Here are some examples where you might utilize logging:
<br><br>

<strong>Record details of every email your server is sending out</strong><br>
It can be useful to have a record of this; say you're running an online store and a customer complains they never received their order confirmation email. A log of outgoing emails could give you insight into whether the system sent them an email or not. (This logging is actually built into the Email library which we'll talk about later).
<br><br>

<strong>Record details of a process that is being regularly and automatically run</strong><br>
<a target="_blank" href="http://docs.cpanel.net/twiki/bin/view/AllDocumentation/CpanelDocs/CronJobs">Cron Jobs</a> are a server tool we use to automatically run certain parts of your application.
<br><br>
Say you're building a forum and every Sunday at midnight you want it to automatically send your users a digest of the posts that were made that past week. You build a controller/method that will take care of this task, and you schedule it via Cron.
<br><br>
When doing something like this, you may want to log the results of this application to see what posts get sent, who the digests are sent to, and to occasionally check up on the process to make sure it's still working smoothly.
<br><br>

<strong>Record debugging information when it's not easy to display it directly on the screen</strong><br>
If you're working on a feature that involves Ajax and sending data via specially formatted strings such as JSON, adding any debugging info to your results could gum up the works. To avoid this, you can instead send the debugging info to a log file.
<br><br><br>


<strong>How it works</strong><br>
To utilize logging, first make sure your application has a folder called <span class="variable">logs/</span> and its permissions are set to writable.
<br>
<img src="./framework_files/00003052.png">
<br><br>
Next, here's a code sample of how to use the Log library:
<textarea class="code" id="code-82" style="display: none; ">&lt;?php
# Instantiate the log class - setting the location where you want the logs to go
$log = Log::instance(LOG_PATH);
		
# Sample log message
$log-&gt;logInfo('Emailed Nick Burns [nick@gmail.com] 5 new posts');
$log-&gt;logInfo('Emailed Matt Foley [matt@gmail.com] 3 new posts');
</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 114.4px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 115px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-comment"># Instantiate the log class - setting the location where you want the logs to go</span></pre><pre><span class="cm-variable-2">$log</span> <span class="cm-operator">=</span> <span class="cm-word">Log</span>::<span class="cm-word">instance</span>(<span class="cm-word">LOG_PATH</span>);</pre><pre><span class="cm-tab">    </span><span class="cm-tab">    </span></pre><pre><span class="cm-comment"># Sample log message</span></pre><pre><span class="cm-variable-2">$log</span><span class="cm-operator">-&gt;</span><span class="cm-word">logInfo</span>(<span class="cm-string">'Emailed Nick Burns [nick@gmail.com] 5 new posts'</span>);</pre><pre><span class="cm-variable-2">$log</span><span class="cm-operator">-&gt;</span><span class="cm-word">logInfo</span>(<span class="cm-string">'Emailed Matt Foley [matt@gmail.com] 3 new posts'</span>);</pre><pre> </pre></div></div></div></div></div></div></div>
<br>
And the results:<br>
<img class="responsive" src="./framework_files/00003054.png">
<br><br>
For more details, explore <span class="variable">/core/libraries/Log.php</span>


</div>













<div class="page">
<h2><a name="Email: Configuration"></a>Email: Configuration</h2>

Applications often need to send emails - whether it be a confirmation email to a newly signed up user, a password reset or some other feature relevant to your system.
<br><br>
You'll also use emails as an administrator / developer by having your application send you bug reports, logs results from scheduled scripts, etc.
<br><br>
Before taking advantage of the Email library in this framework, you first need to set some configurations.
<br><br>
In your application's config file (<span class="variable">/yourapp.com/config/config.php</span>) there are a few email related constants you'll want to change.
<br>
<textarea class="code" id="code-83" style="display: none; ">&lt;?php
define('APP_NAME', 'My App');
define('APP_EMAIL', 'webmaster@myapp.com');</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 50.400000000000006px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 51px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-word">define</span>(<span class="cm-string">'APP_NAME'</span>, <span class="cm-string">'My App'</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'APP_EMAIL'</span>, <span class="cm-string">'webmaster@myapp.com'</span>);</pre></div></div></div></div></div></div></div>
This first set is the From name and email address used for any outgoing emails from your application.
Ideally the domain name on this email matches the domain of your application to lessen the chances your email ends up in spam boxes.
<br><br>
So, for example, if your application was called Java Beans and existed at http://javabeans.com, you'd want your settings to look like this:
<textarea class="code" id="code-84" style="display: none; ">&lt;?php
define('APP_NAME', 'Java Beans');
define('APP_EMAIL', 'info@javabeans.com');</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 50.400000000000006px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 51px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-word">define</span>(<span class="cm-string">'APP_NAME'</span>, <span class="cm-string">'Java Beans'</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'APP_EMAIL'</span>, <span class="cm-string">'info@javabeans.com'</span>);</pre></div></div></div></div></div></div></div>
So that emails received by you would look like this:<br>
<img src="./framework_files/00003035.png">

<br><br>

This next constant is used as a catch-all for general emails from the server to the app administrator (you):
<textarea class="code" id="code-85" style="display: none; ">&lt;?php
define('SYSTEM_EMAIL', 'webmaster@myapp.com');</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 37.6px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 38px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-word">define</span>(<span class="cm-string">'SYSTEM_EMAIL'</span>, <span class="cm-string">'webmaster@myapp.com'</span>);</pre></div></div></div></div></div></div></div>
This email can be the same as the <span class="variable">APP_EMAIL</span>, your own personal email, or any other email you want. Some developers will create a dedicated gmail account just to be the "server email address". This prevents app related emails (logs, BCC's, etc.) from clogging up your personal inbox and would allow multiple developers to have access to the emails.
<br><br>
An example where <span class="variable">SYSTEM_EMAIL</span> is used is when there is a MySQL related error on the live server. Rather than display the error for users to see, the error is emailed to you. 
<br><br>
Example:
<img src="./framework_files/00003038.png">
<br><br>
Another use of SYSTEM_EMAIL is a catch to prevent you from accidentally sending emails to real users when testing: If your <span class="variable">environment.php</span> file has <span class="variable">ENABLE_OUTGOING_EMAIL</span> set to false (as it should on the local server), any outgoing emails triggered during your tests will divert to your <span class="variable">SYSTEM_EMAIL</span>.
<br><br>

<strong>SMTP (Simple Mail Transfer Protocol)</strong><br>
The next configuration step relates to <em>how</em> email is sent from your server. SMTP is a standard protocol for sending emails, and just as your everyday email system works via SMTP, so does your server.

<br><br>
Continuing in your app's configuration file, you should see three constants relating to SMTP. If you're working from the sample application included with the framework download, these settings are commented out by default.
<br><br>
If you leave these settings commented out, email will be sent via your server's SMTP. 

<textarea class="code" id="code-86" style="display: none; ">&lt;?php
//define('SMTP_HOST', '');
//define('SMTP_USERNAME', '');
//define('SMTP_PASSWORD', '');</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 63.2px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 64px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-comment">//define('SMTP_HOST', '');</span></pre><pre><span class="cm-comment">//define('SMTP_USERNAME', '');</span></pre><pre><span class="cm-comment">//define('SMTP_PASSWORD', '');</span></pre></div></div></div></div></div></div></div>

<br>
Alternatively, you can use an external SMTP server such as Gmail or a service like <a target="_blank" href="http://sendgrid.com/">SendGrid.com</a>.
<br><br>
So which one do you use?<br>
When starting out, you can try using your server's SMTP general building and testing. You may run into problems though - for example, SMTP on MAMP is notoriously fickle, and sometimes you'll experience delays in email delivery when running on shared servers.
<br><br>

<strong>Gmail SMTP</strong><br>
To get around this, the next option would be to use <a target="_blank" href="https://support.google.com/mail/bin/answer.py?hl=en&answer=13287">Gmail's SMTP server</a>:

<textarea class="code" id="code-87" style="display: none; ">&lt;?
define('SMTP_HOST', 'smtp.gmail.com');
define('SMTP_USERNAME', 'youraccount@gmail.com');
define('SMTP_PASSWORD', 'topsecret');</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 63.2px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 64px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?</span></pre><pre><span class="cm-word">define</span>(<span class="cm-string">'SMTP_HOST'</span>, <span class="cm-string">'smtp.gmail.com'</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'SMTP_USERNAME'</span>, <span class="cm-string">'youraccount@gmail.com'</span>);</pre><pre><span class="cm-word">define</span>(<span class="cm-string">'SMTP_PASSWORD'</span>, <span class="cm-string">'topsecret'</span>);</pre></div></div></div></div></div></div></div>
<br>
If you do this, you'll want to set up an alias for your application's email (whatever you put in for <span class="variable">APP_EMAIL</span> abve) in your Gmail account so that email received appears to be coming from your application's address and not your Gmail address.
<br><br>
To do this follow the steps in <span class="variable">Gmail: Accounts: Send Mail As</span>. Setting this up requires that you've already configured your @yourdomain.com email address and can receive emails some webmail interface or something like <a target="_blank" href="https://www.google.com/a/cpanel/standard/new3?hl=en&source=gafb-pricing-tabletop-en">Google Apps</a> (suggested).
<br><br>

<strong>SendGrid SMTP</strong><br>
The final option is to use a dedicated email delivery service such as <a target="_blank" href="http://sendgrid.com/">SendGrid.com</a>. This is suggested when you get your application to the point of having real users. Services such as SendGrid take care of the nitty gritty details of email deliverability - making sure their IP's that you send via stay on the whitelists of email providers.

If you're using your own server's SMTP you may run into problems like a whole provider (Hotmail, Yahoo, Comcast, etc.) suddenly deciding to direct all your emails to spam boxes. When this happens, you get a lot of confused users wondering why they aren't receiving any emails from your application. Getting your server removed from a provider's blacklist is a tricky art that takes a lot of time and work. 
<br><br>
In addition to keeping you on good terms with email providers, SendGrid also provide's useful analytics about your emails including open rates, etc.
<br><br>
Given that, we suggest leaving it up to the pros. You can sign up at SendGrid for a free account that gives you 200 emails a day - which should be plenty for general testing. Beyond that, their plans start at 10 cents per 1k emails. 
<br><br>
After you sign-up, SendGrid will provide you with the SMTP settings you'll need to plug in to your configuration file.
</div>












<div class="page">
<h2><a name="Email: Usage"></a>Email: Usage</h2>
PHP has basic mail capabilities via the built in <a target="_blank" href="http://php.net/manual/en/function.mail.php">mail()</a> function, but this framework includes a Email library that adds more functionality and flexibility to your email sending.
<br><br>
The Email library (<span class="variable">/core/libraries/Email.php</span>) uses PHPMailer (<a href="http://code.google.com/a/apache-extras.org/p/phpmailer/wiki/ExamplesPage">documentation</a>).
<br><br>
When using the Email class you need to set the following parameters:
<br>
<textarea class="code" id="code-88" style="display: none; ">$to      (multi-dimension array of name / email pairs)
$from    (single-dimension array of name / email pair)
$subject (string)
$body    (string)
$html    (boolean)
$cc      (multi-dimension array of name / email pairs)
$bcc     (multi-dimension array of name / email pairs)</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 101.60000000000001px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 102px; "><div class="CodeMirror-gutter-text"><pre>1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre>$to      (multi-dimension array of name / email pairs)</pre><pre>$from    (single-dimension array of name / email pair)</pre><pre>$subject (string)</pre><pre>$body    (string)</pre><pre>$html    (boolean)</pre><pre>$cc      (multi-dimension array of name / email pairs)</pre><pre>$bcc     (multi-dimension array of name / email pairs)</pre></div></div></div></div></div></div></div>
<br>
Here's an example:
<textarea class="code" id="code-89" style="display: none; ">&lt;?php
# Build a multi-dimension array of recipients of this email
$to[] = Array("name" =&gt; "Judy Grimes", "email" =&gt; "judy@gmail.com");

# Build a single-dimension array of who this email is coming from
# note it's using the constants we set in the configuration above)
$from = Array("name" =&gt; APP_NAME, "email" =&gt; APP_EMAIL);

# Subject
$subject = "Welcome to JavaBeans";

# You can set the body as just a string of text
$body = "Hi Judy, this is just a message to confirm your registration at JavaBeans.com";

# OR, if your email is complex and involves HTML/CSS, you can build the body via a View just like we do in our controllers
# $body = View::instance('e_users_welcome');

# Build multi-dimension arrays of name / email pairs for cc / bcc if you want to 
$cc  = "";
$bcc = "";

# With everything set, send the email
$email = Email::send($to, $from, $subject, $body, true, $cc, $bcc);</textarea><div class="CodeMirror CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 6px; left: 33px; "><textarea style="position: absolute; padding: 0; width: 1px; height: 1em" wrap="off" autocorrect="off" autocapitalize="off"></textarea></div><div class="CodeMirror-scroll cm-s-default" tabindex="-1"><div style="position: relative; height: 319.20000000000005px; "><div style="position: relative; top: 0px; "><div class="CodeMirror-gutter" style="height: 320px; "><div class="CodeMirror-gutter-text"><pre>&nbsp;1</pre><pre>2</pre><pre>3</pre><pre>4</pre><pre>5</pre><pre>6</pre><pre>7</pre><pre>8</pre><pre>9</pre><pre>10</pre><pre>11</pre><pre>12</pre><pre>13</pre><pre>14</pre><pre>15<br>&nbsp;</pre><pre>16</pre><pre>17</pre><pre>18</pre><pre>19</pre><pre>20</pre><pre>21</pre><pre>22</pre><pre>23</pre></div></div><div class="CodeMirror-lines"><div style="position: relative; z-index: 0; outline: none; margin-left: 27px; "><div style="position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;"></div><pre class="CodeMirror-cursor" style="top: 0px; left: 0px; ">&nbsp;</pre><div style="position: relative; z-index: -1; display: none; "></div><div style=""><pre><span class="cm-meta">&lt;?php</span></pre><pre><span class="cm-comment"># Build a multi-dimension array of recipients of this email</span></pre><pre><span class="cm-variable-2">$to</span>[] <span class="cm-operator">=</span> <span class="cm-word">Array</span>(<span class="cm-string">"name"</span> <span class="cm-operator">=&gt;</span> <span class="cm-string">"Judy Grimes"</span>, <span class="cm-string">"email"</span> <span class="cm-operator">=&gt;</span> <span class="cm-string">"judy@gmail.com"</span>);</pre><pre> </pre><pre><span class="cm-comment"># Build a single-dimension array of who this email is coming from</span></pre><pre><span class="cm-comment"># note it's using the constants we set in the configuration above)</span></pre><pre><span class="cm-variable-2">$from</span> <span class="cm-operator">=</span> <span class="cm-word">Array</span>(<span class="cm-string">"name"</span> <span class="cm-operator">=&gt;</span> <span class="cm-word">APP_NAME</span>, <span class="cm-string">"email"</span> <span class="cm-operator">=&gt;</span> <span class="cm-word">APP_EMAIL</span>);</pre><pre> </pre><pre><span class="cm-comment"># Subject</span></pre><pre><span class="cm-variable-2">$subject</span> <span class="cm-operator">=</span> <span class="cm-string">"Welcome to JavaBeans"</span>;</pre><pre> </pre><pre><span class="cm-comment"># You can set the body as just a string of text</span></pre><pre><span class="cm-variable-2">$body</span> <span class="cm-operator">=</span> <span class="cm-string">"Hi Judy, this is just a message to confirm your registration at JavaBeans.com"</span>;</pre><pre> </pre><pre><span class="cm-comment"># OR, if your email is complex and involves HTML/CSS, you can build the body via a View just like we do in our controllers</span></pre><pre><span class="cm-comment"># $body = View::instance('e_users_welcome');</span></pre><pre> </pre><pre><span class="cm-comment"># Build multi-dimension arrays of name / email pairs for cc / bcc if you want to </span></pre><pre><span class="cm-variable-2">$cc</span>  <span class="cm-operator">=</span> <span class="cm-string">""</span>;</pre><pre><span class="cm-variable-2">$bcc</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>;</pre><pre> </pre><pre><span class="cm-comment"># With everything set, send the email</span></pre><pre><span class="cm-variable-2">$email</span> <span class="cm-operator">=</span> <span class="cm-word">Email</span>::<span class="cm-word">send</span>(<span class="cm-variable-2">$to</span>, <span class="cm-variable-2">$from</span>, <span class="cm-variable-2">$subject</span>, <span class="cm-variable-2">$body</span>, <span class="cm-atom">true</span>, <span class="cm-variable-2">$cc</span>, <span class="cm-variable-2">$bcc</span>);</pre></div></div></div></div></div></div></div>


For more details, explore <span class="variable">/core/libraries/Email.php</span>

</div>












</div>
 
	</div>
	
	<br><br><br>


</body></html>